<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逺子君笔记</title>
  
  <subtitle>或许为了自身写，或许为了知己写！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yuanbeauty.com/"/>
  <updated>2021-03-12T16:00:00.000Z</updated>
  <id>http://blog.yuanbeauty.com/</id>
  
  <author>
    <name>Changyuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sort 的应用</title>
    <link href="http://blog.yuanbeauty.com/archives/b99a614c.html"/>
    <id>http://blog.yuanbeauty.com/archives/b99a614c.html</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2021-03-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>项目中学生答题结束，题干类型单选题和多选题混乱在一起呈现，需求想分开，单选题在前面，多选题在后面。</p><p>届时想到 sort 排序。</p><p>sort() 方法用于对数组的元素进行排序，并返回数组。默认排序顺序是根据字符串 UniCode 码。因为排序是按照字符串 UniCode 码的顺序进行排序的，所以首先应该把数组元素都转化成字符串（如有必要），以便进行比较。</p><p>用法：arrayObject.sort(sortby);</p><p>参数 sortby 可选，用来规定排序的顺序，但必须是函数。</p><h3 id="数组中对象某个值排序"><a href="#数组中对象某个值排序" class="headerlink" title="数组中对象某个值排序"></a>数组中对象某个值排序</h3><p>查看数据结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">items: [</span><br><span class="line">&#123;pk_exam_use_question: &quot;586601&quot;, is_send: &quot;0&quot;, fk_question: &quot;11494&quot;, fk_exam: &quot;103&quot;, object_id: &quot;3690&quot;,…&#125;</span><br><span class="line">&#123;pk_exam_use_question: &quot;586608&quot;, is_send: &quot;0&quot;, fk_question: &quot;11496&quot;, fk_exam: &quot;103&quot;, object_id: &quot;3690&quot;,…&#125;</span><br><span class="line">&#123;pk_exam_use_question: &quot;586615&quot;, is_send: &quot;0&quot;, fk_question: &quot;333754&quot;, fk_exam: &quot;103&quot;,…&#125;</span><br><span class="line">&#123;pk_exam_use_question: &quot;586622&quot;, is_send: &quot;0&quot;, fk_question: &quot;333838&quot;, fk_exam: &quot;103&quot;,…&#125;</span><br><span class="line">&#123;pk_exam_use_question: &quot;586629&quot;, is_send: &quot;0&quot;, fk_question: &quot;332902&quot;, fk_exam: &quot;103&quot;,…&#125;</span><br><span class="line">&#123;pk_exam_use_question: &quot;586636&quot;, is_send: &quot;0&quot;, fk_question: &quot;332901&quot;, fk_exam: &quot;103&quot;,…&#125;</span><br><span class="line">&#123;pk_exam_use_question: &quot;586643&quot;, is_send: &quot;0&quot;, fk_question: &quot;333845&quot;, fk_exam: &quot;103&quot;,…&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>数组中每个对象都有一个试题类型 type 字段，使用 1，2 表示。</p><p>编写函数处理试题排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sortExamType: function(type) &#123;</span><br><span class="line">return function(x, y) &#123;</span><br><span class="line">var v1 = x.type;</span><br><span class="line">var v2 = y.type;</span><br><span class="line">return v1 - v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>比较函数应该具有两个参数 a 和 b，其返回值如下：</p><p>若 a 小于 b，即 a - b 小于零，则返回一个小于零的值，数组将按照升序排列。</p><p>若 a 等于 b，则返回 0。</p><p>若 a 大于 b, 即 a - b 大于零，则返回一个大于零的值，数组将按照降序排列。</p><p>调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">list = list.sort(sortExamType(&apos;type&apos;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;项目中学生答题结束，题干类型单选题和多选题混乱在一起呈现，需求想分开，单选题在前面，多选题在后面。&lt;/p&gt;
&lt;p&gt;届时想到 sort 排序。
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yuanbeauty.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3.x 笔记</title>
    <link href="http://blog.yuanbeauty.com/archives/6856e4f6.html"/>
    <id>http://blog.yuanbeauty.com/archives/6856e4f6.html</id>
    <published>2021-01-08T16:00:00.000Z</published>
    <updated>2021-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue3-0-六大亮点："><a href="#Vue3-0-六大亮点：" class="headerlink" title="Vue3.0 六大亮点："></a><code>Vue3.0</code> 六大亮点：</h3><ul><li><p><code>Performance</code>：性能比 <code>Vue2.x</code> 快 2.2 倍。</p></li><li><p><code>Tree shaking support</code>：按需编译，体积比 <code>Vue2.x</code> 更小。</p></li><li><p><code>Composition API</code>：组合 <code>API</code> （类似 <code>React Hooks</code>）。</p></li><li><p><code>Better TypeScript support</code>：更好的 <code>TS</code> 支持。</p></li><li><p><code>Custom Renderer API</code>：暴露了自定义渲染 <code>API</code>。</p></li><li><p><code>Fragment，Teleport(Protal)，Suspense</code>：更先进的组件。</p></li></ul><h3 id="Vue3-0-是如何变快的。"><a href="#Vue3-0-是如何变快的。" class="headerlink" title="Vue3.0 是如何变快的。"></a><code>Vue3.0</code> 是如何变快的。</h3><p><strong><code>diff</code> 方法优化</strong>：</p><pre><code>* `Vue2.x` 中虚拟 `dom` 是进行全量的对比。* `Vue3.0` 新增了静态标记（`PatchFlag`）。    在与上次虚拟节点进行对比时候，只对比带有 `patch flag` 的节点。    并且可以通过 `flag` 的信息得知当前节点要对比的具体内容。</code></pre><p> <strong><code>hoistStatic</code> 静态提升</strong>：</p><pre><code>* `Vue2.x` 中无论元素是否参与更新，每次都会重新创建。* `Vue3.0` 中对于不参与更新的元素，只会被创建一次，之后会在每次渲染的时候被不停的复用。</code></pre><p><strong><code>cacheHandlers</code> 事件侦听器缓存</strong></p><pre><code>* 默认情况下 `onClick` 会被视为动态绑定，所以每次都会去追踪它的变化。但是因为是同一个函数，所以没有追踪变化，直接缓存起来复用即可。</code></pre><p><strong><code>SSR</code> 渲染</strong></p><pre><code>* 当有大量静态内容的时候，这些内容会被当做纯字符串推进一个 `buffer` 里面，即使存在动态的绑定，会通过模板插值嵌入进去。这样比虚拟 `dom` 来渲染的快上很多。* 当静态内容达到一定量级时候，会用 `_createStaticVNode` 方法在客户端生成一个 `static node`，这些静态 `node`，会被直接 `innerHTML`，就不需要创建对象，然后根据对象渲染。</code></pre><p><strong>组合API</strong></p><pre><code>* `setup` 函数是组合 `API` 入口函数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">    let count = ref(0)</span><br><span class="line"></span><br><span class="line">    function fn() &#123;</span><br><span class="line">        console.log(count)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123; count, fn &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>组合 <code>API</code> 中定义变量或者函数必须 <code>return</code> 暴露给外界；定义方法不必定义到 <code>methods</code>中， 直接在组合 <code>API</code> 中定义即可。</p><p><code>Ref</code> 只能监听简单类型的变化，不建议监听复杂类型（数组/对象等）的变化。</p><p><code>Reactive</code> 可以监听复杂类型的变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">setup() &#123;</span><br><span class="line">    let list = reactive(&#123;</span><br><span class="line">        lists: [&#123;id: 1, name: &apos;zs&apos;&#125;]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;list&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合-API-本质："><a href="#组合-API-本质：" class="headerlink" title="组合 API 本质："></a>组合 <code>API</code> 本质：</h3><p>在 <code>setup</code> 中注册的变量或函数，会自动注册到 <code>vue2.x</code> 中的 <code>data</code> 或 <code>methods</code> 中。</p><p>注意点：</p><pre><code>* 执行`setup` 函数，是在 `beforecreate` 钩子之前完成的。* 在 `setup` 函数中，无法使用 `data` 和 `methods`。* 在 `setup` 函数中，`this` 指向 `undefined`。* `setup` 函数只能是同步的不能是异步的。</code></pre><h3 id="Reactive"><a href="#Reactive" class="headerlink" title="Reactive"></a>Reactive</h3><p>什么是 <code>Reactive</code>。</p><pre><code>* `Reactive` 是 `Vue3.0` 中提供的实现响应式数据的方法。* 在 `Vue2.0` 中响应式数据是通过 `defineProperty` 实现，在 `Vue3.0` 中响应式数据通过 `ES6` 的 `Propxy` 实现。</code></pre><p><code>Reactive</code> 注意点：</p><pre><code>- `Reactive` 函数是对象(`json` 或 `arr`)。- 在创建响应式数据时，传递的不是对象，则无法更新视图。- 如果给 `Reactive` 传递**其他对象**：    * 默认情况下修改对象，界面不会自动更新。    * 如果想更新，可以通过重新赋值的方式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">    let state = reactive(&#123;</span><br><span class="line">        time: new Date()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    function fn() &#123;</span><br><span class="line">        const newTime = new Date(state.time.getTime())</span><br><span class="line">        newTime.setDate(state.time.getDate() + 1)</span><br><span class="line">        state.time = newTime</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123; state, fn&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><pre><code>什么是 `Ref`。    - `Ref` 是用来实现响应式数据的方法。    - 由于 `Reactive` 传入一个对象，导致在开发中如果只想让某个变量实现响应式时会比较麻烦，因此 `Vue3.0` 提供了 `Ref` 方法，实现对简单值的监听。`Ref` 本质：    - `Ref` 底层的本质还是 `Reactive`。    系统会自动根据给 `Ref` 传入的值将它转化为 `ref(xx)` --&gt; `reactive({value: xx})``ref` 注意点：    - 在 `Vue` 中使用 `Ref` 的值，不用通过 `value` 获取。    - 在 `JS` 中使用 `Ref` 的值必须通过 `value` 获取。</code></pre><h3 id="ref-与-reactive-区别"><a href="#ref-与-reactive-区别" class="headerlink" title="ref 与 reactive 区别"></a><code>ref</code> 与 <code>reactive</code> 区别</h3><ul><li><p>如果在 <code>template</code> 中使用 <code>Ref</code> 类型的数据，<code>Vue</code> 会自动帮我们添加 <code>.value</code>。</p></li><li><p>如果在 <code>template</code> 中使用 <code>Reactive</code> 类型的数据，<code>Vue</code> 不会自动帮我们添加 <code>.value</code>。</p><p>  <strong>如何决定是否需要自动添加 <code>.vlue</code></strong></p><ul><li><p><code>Vue</code> 解析数据之前，会自动判断这个数据是否是 <code>Ref</code> 类型的；如果是，就自动添加 <code>.value</code>，如果不是就不自动添加 <code>.value</code>。</p><p><strong>如何判断当前的数据是否是 <code>Ref</code> 类型</strong></p></li><li><p>通过当前数据的 <code>__v_ref</code> 来判断的。如果有这个私有属性，并且取值为 <code>true</code>，就代表是一个 <code>Ref</code> 类型的数据。</p><p><strong>如何自行判断是 <code>Ref</code>，还是 <code>Reactive</code></strong></p><ul><li><p>通过 <code>isRef</code> 和 <code>isReactive</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123;ref, isRef, isReactive&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">    let count = ref(18)</span><br><span class="line"></span><br><span class="line">    console.log(isRef(count))</span><br><span class="line">    console.log(isReactive(count))</span><br><span class="line">    return &#123;count&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="递归监听"><a href="#递归监听" class="headerlink" title="递归监听"></a>递归监听</h3><pre><code>默认情况下，无论是通过 `Ref` 还是 `Reactive` 都是递归监听。递归监听存在的问题：    * 如果数据量较大时，非常消耗性能。创建递归监听，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state.a&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let state = reactive(&#123;</span><br><span class="line">            a: &apos;a&apos;,</span><br><span class="line">            gf: &#123;</span><br><span class="line">                b: &apos;b&apos;,</span><br><span class="line">                f: &#123;</span><br><span class="line">                    c: &apos;c&apos;,</span><br><span class="line">                    s: &#123;</span><br><span class="line">                        d: &apos;d&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        state.a = 1;</span><br><span class="line">        state.gf.b = 2</span><br><span class="line"></span><br><span class="line">        console.log(state.a, state, state.gf.b, state.gf)</span><br><span class="line">        return &#123;state&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>监听到每一层数据变化， 界面 `UI` 更新数据。</code></pre><h3 id="非递归监听"><a href="#非递归监听" class="headerlink" title="非递归监听"></a>非递归监听</h3><pre><code>非递归监听：只能监听第一层， 不能监听其他层；即只有第一层包装成 `proxy`。创建非递归监听，使用 `shallowReactive` 和 `shallowRef`。**注意点：*** 如果是通过 `shallowReactive` 创建数据，只要第一层数据变化，就会更新界面 `UI` 第二层，第三层等等数据；如果第一层数据不更新，界面 `UI` 不会更新。* 如果是通过 `shallowRef` 创建数据，`Vue` 监听的是 `.value` 的变化，并不是第一层数据的变化。* 如果是通过 `shallowRef` 创建数据，想监听第 `n` 层数据，并主动更新 `UI` 界面，这时使用 `triggerRef`方法。* `Vue3.0` 只提供了 `triggerRef` 方法，没有提供 `triggerReactive` 方法；因此如果使用 `triggerReactive` 类型的数据，无法主动触发更新界面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; state.a &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; state.gf.b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let state = shallowReactive(&#123;</span><br><span class="line">            a: &apos;a&apos;,</span><br><span class="line">            gf: &#123;</span><br><span class="line">                b: &apos;b&apos;,</span><br><span class="line">                f: &#123;</span><br><span class="line">                    c: &apos;c&apos;,</span><br><span class="line">                    s: &#123;</span><br><span class="line">                        d: &apos;d&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        let state = shallowRef(&#123;</span><br><span class="line">            a: &apos;a&apos;,</span><br><span class="line">            gf: &#123;</span><br><span class="line">                b: &apos;b&apos;,</span><br><span class="line">                f: &#123;</span><br><span class="line">                    c: &apos;c&apos;,</span><br><span class="line">                    s: &#123;</span><br><span class="line">                        d: &apos;d&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">       // state.a.value = 1;</span><br><span class="line">       // state.gf.b.value = 2</span><br><span class="line"></span><br><span class="line">        state.gf.f.s.d.value = 4;</span><br><span class="line">        triggerRef(state)</span><br><span class="line"></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        state.a = 1;</span><br><span class="line">        state.gf.b = 2</span><br><span class="line"></span><br><span class="line">        console.log(state.a, state, state.gf.b, state.gf)</span><br><span class="line">        return &#123;state&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="shallowRef-的本质"><a href="#shallowRef-的本质" class="headerlink" title="shallowRef 的本质"></a><code>shallowRef</code> 的本质</h3><pre><code>`shallowRef` 底层调用 `shallowReactive`，即： `shallowRef(18) --&gt; shallowReactive({value: 18})`。如果是通过 shallowRef 创建的数据，它监听的是 .value 的变化。因为底层本质上 .value 才是第一层。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import &#123;reactive&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let state = shallowReactive(&#123;</span><br><span class="line">            value: &#123;</span><br><span class="line">                a: &apos;a&apos;,</span><br><span class="line">                gf: &#123;</span><br><span class="line">                    b: &apos;b&apos;,</span><br><span class="line">                    f: &#123;</span><br><span class="line">                        c: &apos;c&apos;,</span><br><span class="line">                        s: &#123;</span><br><span class="line">                            d: &apos;d&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        let state = shallowRef(&#123;</span><br><span class="line">            a: &apos;a&apos;,</span><br><span class="line">            gf: &#123;</span><br><span class="line">                b: &apos;b&apos;,</span><br><span class="line">                f: &#123;</span><br><span class="line">                    c: &apos;c&apos;,</span><br><span class="line">                    s: &#123;</span><br><span class="line">                        d: &apos;d&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        state.a.value = 1;</span><br><span class="line">        state.gf.b.value = 2</span><br><span class="line"></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        state.a = 1;</span><br><span class="line">        state.gf.b = 2</span><br><span class="line"></span><br><span class="line">        console.log(state.a, state, state.gf.b, state.gf)</span><br><span class="line">        return &#123;state&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h3><pre><code>例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;obj.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let obj = &#123; name: &apos;zs&apos;, age: 18 &#125;</span><br><span class="line">        obj.name = &apos;ming&apos;</span><br><span class="line"></span><br><span class="line">        return &#123;obj&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>修改名字数据发生改变，`UI` 没有更新，即不是响应式数据。如果先变成响应式使用 Ref 或者 Reactive。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let obj = &#123; name: &apos;zs&apos;, age: 18 &#125;</span><br><span class="line">        //obj.name = &apos;ming&apos;</span><br><span class="line"></span><br><span class="line">        let state = reactive(obj);</span><br><span class="line">        state.name = &apos;ming&apos;</span><br><span class="line"></span><br><span class="line">        console.log(obj == state) // false</span><br><span class="line"></span><br><span class="line">        return &#123;state&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>从上述得知，state 与 obj 是引用关系，state 引用了 obj。如果直接修改 obj，是无法触发界面更新。只有通过包装之后的对象修改，才会触发界面更新。**从 Reactive 中获取原始数据**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive, toRaw&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let obj = &#123; name: &apos;zs&apos;, age: 18 &#125;</span><br><span class="line">        let state = reactive(obj);</span><br><span class="line"></span><br><span class="line">        state.name = &apos;ming&apos;</span><br><span class="line"></span><br><span class="line">        let obj2 = toRaw(state)</span><br><span class="line"></span><br><span class="line">        console.log(obj2, obj == obj2)</span><br><span class="line"></span><br><span class="line">        return &#123;state&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Ref 或 Reactive 数据类型，每次修改都会被追踪，UI 界面都会被更新，这样非常消耗性能。如果有一些不需要追踪，不需要更新 UI 界面，这时就可以通过 toRaw 方法拿到原始数据，对原始数据进行修改，就不会被追踪，不会更新 UI 界面，性能提高。  **从 Ref 中获取原始数据**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;ref, toRaw&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let obj = &#123; name: &apos;zs&apos;, age: 18 &#125;</span><br><span class="line">        let state = ref(obj);</span><br><span class="line"></span><br><span class="line">        state.name = &apos;ming&apos;</span><br><span class="line"></span><br><span class="line">        let obj2 = toRaw(state.value)</span><br><span class="line"></span><br><span class="line">        console.log(obj2, obj == obj2)</span><br><span class="line"></span><br><span class="line">        return &#123;state&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>从 Ref 中获取原始数据必须添加 .value，因为 Ref 底层是使用 Reactive。</code></pre><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h3><p>如果原始值永远不象被追踪变化，使用 markRaw。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/teamplate&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive, markRaw&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let obj = &#123;name: &apos;zs&apos;, age: 18&#125;</span><br><span class="line">obj = markRaw(obj)</span><br><span class="line">let state = reactive(obj)</span><br><span class="line"></span><br><span class="line">state.name = &apos;cherry&apos;</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h3><p>和 Ref 一样，都是创建响应式数据。</p><p>使用 Ref 打印输出值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/teamplate&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive, ref&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let obj = &#123;name: &apos;zs&apos;, age: 18&#125;</span><br><span class="line">let state = ref(obj.name)</span><br><span class="line"></span><br><span class="line">state.value = &apos;cherry&apos;</span><br><span class="line">console.log(obj, state)</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li><p>如果使用 Ref 将某一个对象中的属性变成响应式的数据，修改响应式数据是不会影响到原始数据。</p></li><li><p>如果响应式数据通过 Ref 创建，修改了数据并会触发 UI 界面更新。</p></li><li><p>相当于 Ref 是复制一份原始值。</p></li></ul><p>使用 roRef 打印输出值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/teamplate&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive, toRef&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let obj = &#123;name: &apos;zs&apos;, age: 18&#125;</span><br><span class="line">let state = toRef(obj, &apos;name&apos;)</span><br><span class="line"></span><br><span class="line">console.log(state)</span><br><span class="line">state.value = &apos;cherry&apos;</span><br><span class="line">console.log(obj, state)</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li><p>如果使用 toRef 将某一个对象中的属性变成响应式的数据，修改响应式数据会影响到原始数据。</p></li><li><p>如果响应式数据通过 toRef 创建，修改了数据并不会触发 UI 界面更新。</p></li><li><p>toRef 的本质是引用原始值。</p></li></ul><p><strong>应用场景：</strong></p><ul><li>如果让响应式数据和以前的数据关联起来，并且更新响应式数据之后并不想更新 UI 界面，就可以使用 toRef。</li></ul><h3 id="roRefs"><a href="#roRefs" class="headerlink" title="roRefs"></a>roRefs</h3><p>如果数据是多个字段，使用 toRef 就必须写多个字段重新赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/teamplate&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive, toRef&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let obj = &#123;name: &apos;zs&apos;, age: 18&#125;</span><br><span class="line">let state = toRef(obj, &apos;name&apos;)</span><br><span class="line">let age = toRef(obj, &apos;age&apos;)</span><br><span class="line"></span><br><span class="line">state.value = &apos;cherry&apos;</span><br><span class="line">age.value = 20</span><br><span class="line">console.log(obj, state)</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述可以通过 toRefs 简化，底层逻辑还是通过 toRef 实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/teamplate&gt;</span><br><span class="line"></span><br><span class="line">import &#123;reactive, toRefs&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let obj = &#123;name: &apos;zs&apos;, age: 18&#125;</span><br><span class="line">let state = toRefs(obj)</span><br><span class="line"></span><br><span class="line">console.log(obj, state)</span><br><span class="line">state.name.value = &apos;cherry&apos;</span><br><span class="line">state.age.value = 20</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><p>理解为自定义 Ref。</p><p>返回一个 Ref 对象，可以显式的控制以来追踪和触发相应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;state&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/teamplate&gt;</span><br><span class="line"></span><br><span class="line">import &#123;ref, customRef&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let state = myRef(18)</span><br><span class="line"></span><br><span class="line">state.value = 20;</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function myRef(value) &#123;</span><br><span class="line">return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">//track -&gt; 追踪 </span><br><span class="line">//trigger -&gt; 触发</span><br><span class="line">return &#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue 这个数据是需要追踪变化</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newVal) &#123;</span><br><span class="line">value = newVal</span><br><span class="line">trigger() // 告诉Vue触发界面更新</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体查看 <a href="https://v3.cn.vuejs.org/api/refs-api.html#customref" target="_blank" rel="noopener">Vue3.0 官方文档API</a>。</p><h3 id="Ref-获取元素"><a href="#Ref-获取元素" class="headerlink" title="Ref 获取元素"></a>Ref 获取元素</h3><p>在 Vue2.x 中，可以通过给元素添加 ref=’xxx’，然后在代码中通过 refs.xxx 方式获取元素。</p><p>在 Vue3.0 中，也可以通过 ref 获取元素，使用写法不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div ref=&quot;box&quot;&gt;box&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;ref, onMounted&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let box = ref(null)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">console.log(box.value) // ②</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(box.value) // ①</span><br><span class="line"></span><br><span class="line">return &#123;box&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="readonly家族"><a href="#readonly家族" class="headerlink" title="readonly家族"></a>readonly家族</h3><ul><li>readonly：用于创建一个只读的数据，并且是递归只读。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; state &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;readonly&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">const value = &#123;name: &apos;ls&apos;, age: 26&#125;</span><br><span class="line"></span><br><span class="line">let state = readonly(&#123;</span><br><span class="line">name: &apos;zs&apos;,</span><br><span class="line">attr&#123;</span><br><span class="line">age: 18,</span><br><span class="line">height: 1.88</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">state.name = &apos;cherry&apos;</span><br><span class="line">state.attr.age = 20</span><br><span class="line">state.attr.height = 1.77</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">value.name = &apos;xing&apos;</span><br><span class="line">value.age = 66</span><br><span class="line"></span><br><span class="line">console.log(value)</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>修改响应式数据，修改后的数据没变化，UI 界面数据没变化。</li></ul><p><strong>const 和 rwadonly区别：</strong></p><ul><li><p>const：赋值保护，不能给变量重新赋值</p></li><li><p>readonly：属性保护，不能给属性重新赋值</p></li></ul><p><strong>shallowReadonly</strong>：用于创建一个第一层只读的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; state &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;shallowReadonly&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let state = shallowReadonly(&#123;</span><br><span class="line">name: &apos;zs&apos;,</span><br><span class="line">attr&#123;</span><br><span class="line">age: 18,</span><br><span class="line">height: 1.88</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">state.name = &apos;cherry&apos;</span><br><span class="line">state.attr.age = 20</span><br><span class="line">state.attr.height = 1.77</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>修改响应式数据，修改后的数据第一层没发生变化，第二层数据发生变化，并且 UI 界面没更新。</p><p><strong>isReadonly</strong>：用于判断是否是 Readonly。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; state &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123;isReadonly,shallowReadonly&#125; from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">let state = shallowReadonly(&#123;</span><br><span class="line">name: &apos;zs&apos;,</span><br><span class="line">attr&#123;</span><br><span class="line">age: 18,</span><br><span class="line">height: 1.88</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">state.name = &apos;cherry&apos;</span><br><span class="line">state.attr.age = 20</span><br><span class="line">state.attr.height = 1.77</span><br><span class="line"></span><br><span class="line">console.log(isReadonly(state))</span><br><span class="line"></span><br><span class="line">return &#123;state&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue3响应式数据本质"><a href="#Vue3响应式数据本质" class="headerlink" title="Vue3响应式数据本质"></a>Vue3响应式数据本质</h3><ul><li><p>Vue2.x 是通过 defineProperty 实现响应式数据。</p></li><li><p>Vue3.0 是通过 Proxy 实现响应式数据。</p></li></ul><p>模拟：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let obj = &#123; name: &apos;zs&apos;, age: 18 &#125;</span><br><span class="line"></span><br><span class="line">let state = new Proxy(obj, handler: &#123;</span><br><span class="line">get(obj, key) &#123;</span><br><span class="line">return obj[key]</span><br><span class="line">&#125;,</span><br><span class="line">set(obj, key, newVal) &#123;</span><br><span class="line">obj[key] = newVal</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">state.name = &apos;cherry&apos;</span><br><span class="line"></span><br><span class="line">console.log(state)</span><br></pre></td></tr></table></figure><h3 id="实现-shallowReactive"><a href="#实现-shallowReactive" class="headerlink" title="实现 shallowReactive"></a>实现 shallowReactive</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function shallowReactive(obj) &#123;</span><br><span class="line">return new Proxy(obj, handler: &#123;</span><br><span class="line">get() &#123;</span><br><span class="line">return obj[key]</span><br><span class="line">&#125;,</span><br><span class="line">set(obj, key, newVal) &#123;</span><br><span class="line">obj[key] = newVal</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let obj = &#123;</span><br><span class="line">a: &apos;a&apos;,</span><br><span class="line">gf: &#123;</span><br><span class="line">b: &apos;b&apos;,</span><br><span class="line">f: &#123;</span><br><span class="line">c: &apos;c&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let state = shallowReactive(obj)</span><br><span class="line"></span><br><span class="line">state.a = 1</span><br><span class="line">state.gf.b = 2</span><br><span class="line">state.gf.f.c = 3</span><br><span class="line"></span><br><span class="line">cosole.log(state)</span><br></pre></td></tr></table></figure><h3 id="实现-shallowRef"><a href="#实现-shallowRef" class="headerlink" title="实现 shallowRef"></a>实现 shallowRef</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function shallowRef(val) &#123;</span><br><span class="line">return shallowReactive(obj: &#123;value: val&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let state = shallowRef(obj)</span><br><span class="line"></span><br><span class="line">state.value.a = 1</span><br><span class="line">state.value.gf.b = 2</span><br><span class="line">state.value.gf.f.c = 3</span><br><span class="line"></span><br><span class="line">cosole.log(state)</span><br></pre></td></tr></table></figure><h3 id="实现-Reactive"><a href="#实现-Reactive" class="headerlink" title="实现 Reactive"></a>实现 Reactive</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Reactive(obj) &#123;</span><br><span class="line"></span><br><span class="line">if(typeof obj === &apos;object&apos;) &#123;</span><br><span class="line"></span><br><span class="line">if(obj instanceof Array) &#123;</span><br><span class="line">// 如果是一个数组，那取出数组中的每一个元素</span><br><span class="line">// 判断每一个元素是否又是一个对象，如果又是一个对象，那么也需要包装Proxy</span><br><span class="line">obj.forEach((item, index) =&gt; &#123;</span><br><span class="line">if(typeof item === &apos;object&apos;) obj[index] = Reactive(item) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">// 如果是一个对象，那么取出对象属性的取值</span><br><span class="line">// 判断对象属性的取值是否又是一个对象，如果是一个对象，那么也需要包装成 Proxy</span><br><span class="line"></span><br><span class="line">for(let key in obj) &#123;</span><br><span class="line">let item = obj[key]</span><br><span class="line">if(typeof item === &apos;object&apos;) obj[index] = Reactive(item) </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return new Proxy(obj, handler: &#123;</span><br><span class="line">get() &#123;</span><br><span class="line">return obj[key]</span><br><span class="line">&#125;,</span><br><span class="line">set(obj, key, newVal) &#123;</span><br><span class="line">obj[key] = newVal</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(`$&#123;obj&#125; is not object`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let obj = &#123;</span><br><span class="line">a: &apos;a&apos;,</span><br><span class="line">gf: &#123;</span><br><span class="line">b: &apos;b&apos;,</span><br><span class="line">f: &#123;</span><br><span class="line">c: &apos;c&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let state = Reactive(obj)</span><br><span class="line"></span><br><span class="line">state.a = 1</span><br><span class="line">state.gf.b = 2</span><br><span class="line">state.gf.f.c = 3</span><br><span class="line"></span><br><span class="line">cosole.log(state)</span><br></pre></td></tr></table></figure><h3 id="实现-Ref"><a href="#实现-Ref" class="headerlink" title="实现 Ref"></a>实现 Ref</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Ref(val) &#123;</span><br><span class="line">return Reactive(obj: &#123;value: val&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue3-0-六大亮点：&quot;&gt;&lt;a href=&quot;#Vue3-0-六大亮点：&quot; class=&quot;headerlink&quot; title=&quot;Vue3.0 六大亮点：&quot;&gt;&lt;/a&gt;&lt;code&gt;Vue3.0&lt;/code&gt; 六大亮点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Pe
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.yuanbeauty.com/categories/Vue/"/>
    
      <category term="Vue3.x" scheme="http://blog.yuanbeauty.com/categories/Vue/Vue3-x/"/>
    
    
  </entry>
  
  <entry>
    <title>ReactRouter 笔记</title>
    <link href="http://blog.yuanbeauty.com/archives/e25871c1.html"/>
    <id>http://blog.yuanbeauty.com/archives/e25871c1.html</id>
    <published>2020-11-25T16:00:00.000Z</published>
    <updated>2021-01-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ReactRouter-配置"><a href="#ReactRouter-配置" class="headerlink" title="ReactRouter 配置"></a>ReactRouter 配置</h3><p>首先安装 <code>react</code> 和 <code>react-router-dom</code>。</p><ul><li>路由配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//AppRouter</span><br><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Link &#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line">function Index() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;h2&gt;首页&lt;/h2&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function List() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;h2&gt;列表页&lt;/h2&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function AppRouter() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&apos;/list/&apos;&gt;列表&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; exact component=&#123;Index&#125; /&gt;</span><br><span class="line">            &lt;Route path=&quot;/list/&quot; component=&#123;List&#125; /&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AppRouter;</span><br></pre></td></tr></table></figure><p><em>exact</em>：表示精确匹配。</p><h3 id="ReactRouter-拆分"><a href="#ReactRouter-拆分" class="headerlink" title="ReactRouter 拆分"></a>ReactRouter 拆分</h3><p>模拟真实项目，每个菜单是一个单独的路由文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//AppRouter</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Link &#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line">import Index from &apos;./pages/index&apos;</span><br><span class="line">import List from &apos;./pages/list&apos;</span><br><span class="line"></span><br><span class="line">function AppRouter() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&apos;/list/&apos;&gt;列表&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; exact component=&#123;Index&#125; /&gt;</span><br><span class="line">            &lt;Route path=&quot;/list/&quot; component=&#123;List&#125; /&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AppRouter</span><br></pre></td></tr></table></figure><h3 id="ReactRouter-接收路由参数"><a href="#ReactRouter-接收路由参数" class="headerlink" title="ReactRouter 接收路由参数"></a>ReactRouter 接收路由参数</h3><p>设置路由动态传值规则：</p><pre><code>* 第一步：传递值* 第二步：接收值* 第三步：显示内容</code></pre><p>在 <code>list</code> 路由配置路由参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Link &#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line">import Index from &apos;./pages/index&apos;</span><br><span class="line">import List from &apos;./list/index&apos;</span><br><span class="line"></span><br><span class="line">function AppRouter() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&apos;/list/&apos;&gt;列表&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; exact component=&#123;Index&#125; /&gt;</span><br><span class="line">            &#123;/* 设置路由参数 */&#125;</span><br><span class="line">            &lt;Route path=&quot;/list/:id&quot; component=&#123;List&#125; /&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AppRouter</span><br></pre></td></tr></table></figure><p>子组件 <code>List</code> 接收路由参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;Link&#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class List extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123; </span><br><span class="line">        return ( </span><br><span class="line">            &lt;h2&gt;页面分离-列表页 ---url传递的值是： &#123;this.state.id&#125;&lt;/h2&gt;</span><br><span class="line">         );</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        console.log(this.props)</span><br><span class="line">        let id = this.props.match.params.id</span><br><span class="line">        this.setState(&#123;id: id&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default List;</span><br></pre></td></tr></table></figure><h3 id="ReactRouter-动态传值和重定向"><a href="#ReactRouter-动态传值和重定向" class="headerlink" title="ReactRouter 动态传值和重定向"></a>ReactRouter 动态传值和重定向</h3><p>在 <code>react</code> 中路由重定向有两种方式，一种是标签式，一种是编程式。</p><p>配置列表详情界面组件，并将该组件添加到 <code>AppRouter.js</code> 文件中。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function ListDetail() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        &lt;h2&gt;详情页&lt;/h2&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ListDetail;</span><br></pre></td></tr></table></figure><ul><li>设置路由动态传值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;Link&#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line">class List Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            list: [</span><br><span class="line">                &#123;cid: 126, title: &apos;个人博客1&apos;&#125;,</span><br><span class="line">                &#123;cid: 666, title: &apos;个人博客2&apos;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123; </span><br><span class="line">        return ( </span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;h2&gt;页面分离-列表页&lt;/h2&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;url动态传值&lt;/li&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                            return (</span><br><span class="line">                                &lt;li key=&#123;index&#125;&gt;</span><br><span class="line">                                    &lt;Link to=&#123;&apos;/Listdetail/&apos;+item.cid&#125;&gt;&#123;item.title&#125;&lt;/Link&gt; </span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">         );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default List</span><br></pre></td></tr></table></figure><p>配置重定向界面 <code>home.js</code> 文件，并将该组件添加到 <code>AppRouter.js</code> 文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function Home() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;h2&gt;重定向界面&lt;/h2&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Home;</span><br></pre></td></tr></table></figure><ul><li>标签式设置重定向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;Link, Redirect&#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line">class List Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            list: [</span><br><span class="line">                &#123;cid: 126, title: &apos;个人博客1&apos;&#125;,</span><br><span class="line">                &#123;cid: 666, title: &apos;个人博客2&apos;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123; </span><br><span class="line">        return ( </span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &#123;/* 标签式 Redirect 重定向路径  */&#125;</span><br><span class="line">                &lt;Redirect to=&quot;/home/&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h2&gt;页面分离-列表页&lt;/h2&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;url动态传值&lt;/li&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                            return (</span><br><span class="line">                                &lt;li key=&#123;index&#125;&gt;</span><br><span class="line">                                    &lt;Link to=&#123;&apos;/Listdetail/&apos;+item.cid&#125;&gt;&#123;item.title&#125;&lt;/Link&gt; </span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">         );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default List</span><br></pre></td></tr></table></figure><ul><li>编程式设置重定向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;Link, Redirect&#125; from &apos;react-router-dom&apos;</span><br><span class="line"></span><br><span class="line">class List Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            list: [</span><br><span class="line">                &#123;cid: 126, title: &apos;个人博客1&apos;&#125;,</span><br><span class="line">                &#123;cid: 666, title: &apos;个人博客2&apos;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //编程式重定向</span><br><span class="line">        this.props.history.push(&apos;/home/&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123; </span><br><span class="line">        return ( </span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;h2&gt;页面分离-列表页&lt;/h2&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;url动态传值&lt;/li&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                            return (</span><br><span class="line">                                &lt;li key=&#123;index&#125;&gt;</span><br><span class="line">                                    &lt;Link to=&#123;&apos;/Listdetail/&apos;+item.cid&#125;&gt;&#123;item.title&#125;&lt;/Link&gt; </span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">         );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default List</span><br></pre></td></tr></table></figure><h3 id="ReactRouter-路由嵌套"><a href="#ReactRouter-路由嵌套" class="headerlink" title="ReactRouter 路由嵌套"></a>ReactRouter 路由嵌套</h3><p>模拟真实项目选择左侧列表内容，呈现出该列表相关内容信息。</p><p>配置 <code>AppRouter.js</code> 路由文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Link &#125; from &apos;react-router-dom&apos;</span><br><span class="line">import List from &apos;./pages/list&apos;</span><br><span class="line"></span><br><span class="line">function AppRouter() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/list&quot;&gt;列表&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; exact /&gt;</span><br><span class="line">            &lt;Route path=&quot;/list&quot; component=&#123;List&#125; /&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AppRouter</span><br></pre></td></tr></table></figure><p>配置 <code>List</code> 组件并布局样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">    import &apos;./index.css&apos;</span><br><span class="line"></span><br><span class="line">    class List Component &#123;</span><br><span class="line">        constructor(props) &#123;</span><br><span class="line">            super(props)</span><br><span class="line">            this.state =&#123;</span><br><span class="line">                routerConfig: [</span><br><span class="line">                    &#123;id: 1, title: &apos;视频页面&apos;, path: &apos;/video/&apos;, exact: false, component: Video&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (</span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;h2&gt;列表页&lt;/h2&gt;</span><br><span class="line">                &lt;div className=&quot;box&quot;&gt;</span><br><span class="line">                    &lt;div className=&quot;left&quot;&gt;</span><br><span class="line">                        &lt;ul&gt;</span><br><span class="line">                            &#123;</span><br><span class="line">                                this.state.routerConfig.map((item, index) =&gt; &#123;</span><br><span class="line">                                    return(</span><br><span class="line">                                        &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">                                            &lt;Link to=&#123;item.path&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                    )</span><br><span class="line">                                &#125;)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div className=&quot;right&quot;&gt;</span><br><span class="line">                        点击右侧列表呈现相关内容</span><br><span class="line">                        &#123;</span><br><span class="line">                            this.state.routerConfig.map((item, index) =&gt; &#123;</span><br><span class="line">                                return(&lt;Route path=&#123;item.path&#125; component=&#123;item.component&#125; /&gt;)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">export default List</span><br></pre></td></tr></table></figure><p>布局样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">.box&#123; display: flex &#125;</span><br><span class="line">.left&#123; width:120px;&#125;</span><br><span class="line">.right&#123; flex:1 &#125;</span><br></pre></td></tr></table></figure><p>配置 <code>Video</code> 组件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; Route, Link&#125; from &apos;react-router-dom&apos;</span><br><span class="line">import Vue from &apos;./vue&apos;</span><br><span class="line"></span><br><span class="line">function Video() &#123;</span><br><span class="line">    return ( </span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;h2&gt;</span><br><span class="line">                video页面</span><br><span class="line">            &lt;/h2&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/video/Vue/&quot;&gt;Vue教程&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Route path=&quot;/video/vue&quot; component=&#123;Vue&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Video;</span><br></pre></td></tr></table></figure><p>配置 <code>Vue</code> 组件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function Vue() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;h2&gt;Vue教程开始啦~&lt;/h2&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Vue;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ReactRouter-配置&quot;&gt;&lt;a href=&quot;#ReactRouter-配置&quot; class=&quot;headerlink&quot; title=&quot;ReactRouter 配置&quot;&gt;&lt;/a&gt;ReactRouter 配置&lt;/h3&gt;&lt;p&gt;首先安装 &lt;code&gt;react&lt;/code
      
    
    </summary>
    
    
      <category term="React" scheme="http://blog.yuanbeauty.com/categories/React/"/>
    
      <category term="ReactRouter" scheme="http://blog.yuanbeauty.com/categories/React/ReactRouter/"/>
    
    
  </entry>
  
  <entry>
    <title>实现6位短信验证码input输入框效果</title>
    <link href="http://blog.yuanbeauty.com/archives/88c42c5b.html"/>
    <id>http://blog.yuanbeauty.com/archives/88c42c5b.html</id>
    <published>2020-10-23T16:00:00.000Z</published>
    <updated>2020-10-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>UI 提供一张设计图，如下：</p><p><img src="/images/free-pwd1.jpg" style="width:100%;height:900px;" alt="UI设计图"></p><p>输入 6 位数字密码，每个 <code>input</code> 只能输入一个数字，每次输入完当前 <code>input</code> 框后自动跳转到下一个 <code>input</code>，输入完成后提交数据。</p><p><img src="/images/free-pwd2.jpg" style="width:100%;height:900px;" alt="输入完整后效果"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>布局 6 个 <code>input</code> 框，使用 <code>keydown</code> 事件监听删除操作，<code>keyup</code> 事件监听输入时操作，输入完当前 <code>input</code> 是否满足需求， 判断是否跳转到下一个 <code>input</code>。</p><p><code>html</code> 代码部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;input-frame mb10 clearfix&quot;&gt;</span><br><span class="line">&lt;input @keydown.8=&quot;deleteVal(&apos;input1&apos;, &apos;input1&apos;)&quot; @keyup=&quot;changeVal($event, &apos;input1&apos;, &apos;input2&apos;)&quot; ref=&quot;input1&quot; type=&quot;text&quot; class=&quot;c-fl input-password&quot; maxLength=&quot;1&quot; v-model.trim=&quot;input1&quot; type=&quot;number&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">&lt;input @keydown.8=&quot;deleteVal(&apos;input2&apos;, &apos;input1&apos;)&quot; @keyup=&quot;changeVal($event, &apos;input2&apos;, &apos;input3&apos;)&quot; ref=&quot;input2&quot; type=&quot;text&quot; class=&quot;c-fl input-password&quot; maxLength=&quot;1&quot; v-model.trim=&quot;input2&quot; type=&quot;number&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">&lt;input @keydown.8=&quot;deleteVal(&apos;input3&apos;, &apos;input2&apos;)&quot; @keyup=&quot;changeVal($event, &apos;input3&apos;, &apos;input4&apos;)&quot; ref=&quot;input3&quot; type=&quot;text&quot; class=&quot;c-fl input-password&quot; maxLength=&quot;1&quot; v-model.trim=&quot;input3&quot; type=&quot;number&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">&lt;input @keydown.8=&quot;deleteVal(&apos;input4&apos;, &apos;input3&apos;)&quot; @keyup=&quot;changeVal($event, &apos;input4&apos;, &apos;input5&apos;)&quot; ref=&quot;input4&quot; type=&quot;text&quot; class=&quot;c-fl input-password&quot; maxLength=&quot;1&quot; v-model.trim=&quot;input4&quot; type=&quot;number&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">&lt;input @keydown.8=&quot;deleteVal(&apos;input5&apos;, &apos;input4&apos;)&quot; @keyup=&quot;changeVal($event, &apos;input5&apos;, &apos;input6&apos;)&quot; ref=&quot;input5&quot; type=&quot;text&quot; class=&quot;c-fl input-password&quot; maxLength=&quot;1&quot; v-model.trim=&quot;input5&quot; type=&quot;number&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">&lt;input @keydown.8=&quot;deleteVal(&apos;input6&apos;, &apos;input5&apos;)&quot; @keyup=&quot;changeVal($event, &apos;input6&apos;, &apos;input6&apos;)&quot; ref=&quot;input6&quot; type=&quot;text&quot; class=&quot;c-fl input-password&quot; maxLength=&quot;1&quot; v-model.trim=&quot;input6&quot; type=&quot;number&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;tac pt15&quot;&gt;</span><br><span class="line">&lt;p class=&quot;p10&quot; style=&quot;color:#FC3D39;&quot;&gt;&#123;&#123; errMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;button class=&quot;btn fs16 btn-theme&quot; @click=&quot;saveFreePassword&quot;&gt;确定&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>删除值时监听当前 <code>input</code> 值，和 上一个 <code>input</code> 值；如果当前 <code>input</code> 值为空，则鼠标光标跳转到上一个 <code>input</code> 框，并清除该 <code>input</code> 值。</p><p>输入值时，监听系统事件，当前 <code>input</code> 值，和下一个 <code>input</code> 值，输入完当前 <code>input</code> 值后，鼠标光标自动跳转到下一个 <code>input</code>。输入正确完整后提交数据到后端。</p><p><code>JS</code> 代码部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">data: function() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">errMsg: &apos;&apos;,</span><br><span class="line">input1: &apos;&apos;,</span><br><span class="line">input2: &apos;&apos;,</span><br><span class="line">input3: &apos;&apos;,</span><br><span class="line">input4: &apos;&apos;,</span><br><span class="line">input5: &apos;&apos;,</span><br><span class="line">input6: &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">deleteVal: function(inputval, preInputVal) &#123;</span><br><span class="line">if(this[inputval].length &gt; 0) &#123;</span><br><span class="line">this[inputval] = &apos;&apos;;</span><br><span class="line">&#125;else&#123; //光标跳转到上一个input</span><br><span class="line">this.$nextTick(function() &#123;</span><br><span class="line">this.$refs[preInputVal].focus();</span><br><span class="line">this[preInputVal] = &apos;&apos;;</span><br><span class="line">this[inputval] = &apos;&apos;;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">this.errMsg = &apos;&apos;;</span><br><span class="line">&#125;,</span><br><span class="line">changeVal: function(e, inputVal, nextInputVal) &#123; //当前input，下一个input</span><br><span class="line">this[inputVal] = this[inputVal].replace(/[^\d]&#123;1&#125;/g, &apos;&apos;);</span><br><span class="line">if(this[inputVal].length &lt;= 0) return false;</span><br><span class="line">if(e.keyCode != 8) &#123;</span><br><span class="line">this.$nextTick(function() &#123;</span><br><span class="line">this.$refs[nextInputVal].focus();</span><br><span class="line">this[inputVal] = (this[inputVal]).toString().slice(-1);</span><br><span class="line">this.errMsg = &apos;&apos;;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">saveFreePassword: function() &#123;</span><br><span class="line">this.freePassword = this.input1 + this.input2 + this.input3 + this.input4 + this.input5 + this.input6;</span><br><span class="line">this.freePassword = this.freePassword.replace(/[^\d]/g, &apos;&apos;);</span><br><span class="line">if(this.freePassword.length != 6) &#123;</span><br><span class="line">this.errMsg = &apos;※ 密码错误，请确认密码后重新输入&apos;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">this.$root.Bus.$emit(&apos;freeCoursePassword&apos;, &#123; freePassword:  this.freePassword&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;UI 提供一张设计图，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/free-pwd1.jpg&quot; style=&quot;width:10
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.yuanbeauty.com/categories/Vue/"/>
    
      <category term="input" scheme="http://blog.yuanbeauty.com/categories/Vue/input/"/>
    
    
  </entry>
  
  <entry>
    <title>ElementUI中Drawer组件特效在Safari浏览器出现动画错误</title>
    <link href="http://blog.yuanbeauty.com/archives/a83e3e60.html"/>
    <id>http://blog.yuanbeauty.com/archives/a83e3e60.html</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2020-09-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>ElementUI</code> 中的抽屉组件在 <code>safari</code> 浏览器下，动画向上跳出然后再定位在底部呈现抽屉效果。</p><p>官网上出现的动画异常在 <code>2.13.0</code> 版本之后，在这版本之前没有出现动画错误。</p><h3 id="对比版本"><a href="#对比版本" class="headerlink" title="对比版本"></a>对比版本</h3><ul><li>2.12.0 版本：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      closed: false,</span><br><span class="line">      prevActiveElement: null</span><br><span class="line">    &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> watch: &#123;</span><br><span class="line">    visible(val) &#123;</span><br><span class="line">      if (val) &#123;</span><br><span class="line">        this.closed = false;</span><br><span class="line">        this.$emit(&apos;open&apos;);</span><br><span class="line">        if (this.appendToBody) &#123;</span><br><span class="line">         document.body.appendChild(this.$el);</span><br><span class="line">        &#125;</span><br><span class="line">        this.prevActiveElement = document.activeElement;</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">         Utils.focusFirstDescendant(this.$refs.drawer);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (!this.closed) this.$emit(&apos;close&apos;);</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          if (this.prevActiveElement) &#123;</span><br><span class="line">            this.prevActiveElement.focus();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>2.13.1 版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    closed: false,</span><br><span class="line">    prevActiveElement: null</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  visible(val) &#123;</span><br><span class="line">    if (val) &#123;</span><br><span class="line">       this.closed = false;</span><br><span class="line">       this.$emit(&apos;open&apos;);</span><br><span class="line">       if (this.appendToBody) &#123;</span><br><span class="line">       document.body.appendChild(this.$el);</span><br><span class="line">       &#125;</span><br><span class="line">       this.prevActiveElement = document.activeElement;</span><br><span class="line">       /****/</span><br><span class="line">       this.$nextTick(function() &#123;</span><br><span class="line">       Utils.focusFirstDescendant(this.$refs.drawer);</span><br><span class="line">       &#125;)</span><br><span class="line">       /****/</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      if (!this.closed) this.$emit(&apos;close&apos;);</span><br><span class="line">      /****/</span><br><span class="line">      this.$nextTick(function() &#123;</span><br><span class="line">      if(this.prevActiveElement) &#123;</span><br><span class="line">      this.prevActiveElement.focus();</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      /****/</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这段代码是为了触发focus，触发focus 造成动画偏移，在safari浏览器中 如果抽屉组件中唯一可focus的元素是element的按钮组件，则改抽屉出现的动画定位会偏移并且动效不对，如果把该组件的头部隐藏，内容中没有按钮，这样就没有这样的问题！</p><p>这就是出现动画错误的原因。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>删除源码中上面 <code>$nextTick</code> 两段代码块。</p></li><li><p>自己封装抽屉特效。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ElementUI&lt;/code&gt; 中的抽屉组件在 &lt;code&gt;safari&lt;/code&gt; 浏览器下，动画向上跳出然后再定位在底部呈现抽屉效果。&lt;/p&gt;
&lt;p&gt;官网上出现的动画异常在 &lt;code&gt;2.13.0&lt;/code&gt; 版本之后，在这版本之前没有出现动画错误。
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.yuanbeauty.com/categories/Vue/"/>
    
      <category term="ElementUI-Drawer" scheme="http://blog.yuanbeauty.com/categories/Vue/ElementUI-Drawer/"/>
    
    
  </entry>
  
  <entry>
    <title>React16.x 笔记</title>
    <link href="http://blog.yuanbeauty.com/archives/f1ce3ff8.html"/>
    <id>http://blog.yuanbeauty.com/archives/f1ce3ff8.html</id>
    <published>2020-09-11T16:00:00.000Z</published>
    <updated>2021-09-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写-ToDoList-列表"><a href="#编写-ToDoList-列表" class="headerlink" title="编写 ToDoList 列表"></a>编写 ToDoList 列表</h3><p>根据官网提示自行安装 <code>create-react-app</code> 项目。</p><h3 id="编写-HelloWord-组件"><a href="#编写-HelloWord-组件" class="headerlink" title="编写 HelloWord 组件"></a>编写 HelloWord 组件</h3><p><code>react</code> 编写组件提供两种方式，一种为 <code>class</code> 组件形式，也叫有状态组件；一种为 <code>function</code> 组件形式，也叫做无状态组件。</p><p>其中，<code>class</code> 组件形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class HelloWord extends Component() &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &lt;div&gt;Hello Word&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>function</code> 组件形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return &lt;div&gt;Hello Word&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回内容为多行，可以在 <code>return</code> 后添加 <code>( ...代码 )</code>，<code>class</code> 组件也是如此， 即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;Hello Word&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JXS-语法"><a href="#JXS-语法" class="headerlink" title="JXS 语法"></a>JXS 语法</h3><p>在 <code>react</code> 组件中使用 <code>JXS</code> 注释内容有两种方式；</p><ul><li>一种为单行注释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return (</span><br><span class="line">        // 注释</span><br><span class="line">        &lt;div&gt;Hello Word&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一种为多行注释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">// function 组件</span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &#123;/*</span><br><span class="line">            注释</span><br><span class="line">        */&#125;</span><br><span class="line">        &lt;div&gt;Hello Word&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写标签，给标签添加类名需要注意使用 <code>className</code>，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&quot;box&quot;&gt;Hello Word&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>label</code> 时，注意使用 <code>htmlFor</code>，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label htmlFor=&quot;fename&quot;&gt;&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;fename&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析 <code>html</code> 标签内容使用 <code>dangerouslySetInnerHTML</code>，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">const html = &quot;&lt;h2&gt;标签&lt;/h2&gt;&quot;</span><br><span class="line"></span><br><span class="line">function HelloWord() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div dangerouslySetInnerHTML=&#123;&#123;_html:html&#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-ToDoList-组件"><a href="#编写-ToDoList-组件" class="headerlink" title="编写 ToDoList 组件"></a>编写 <code>ToDoList</code> 组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class ToDoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;内容一&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;内容二&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ToDoList</span><br></pre></td></tr></table></figure><p>编写完成，在该项目根目录 <code>index.js</code> 引入该组件后在界面可查看内容。</p><h3 id="删除-ToDoList"><a href="#删除-ToDoList" class="headerlink" title="删除 ToDoList"></a>删除 ToDoList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class ToDoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            list: [&apos;内容一&apos;, &apos;内容二&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                    return (</span><br><span class="line">                        &lt;li </span><br><span class="line">                            key=&#123;item+index&#125; </span><br><span class="line">                            onClick=&quot;this.deleteItem.bind(this, index)&quot;&gt;</span><br><span class="line">                            &#123;item&#125;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    )</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    deleteItem(index) &#123;</span><br><span class="line">        let list = this.state.list;</span><br><span class="line">        list.splice(1, index);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ToDoList</span><br></pre></td></tr></table></figure><h3 id="添加-ToDoList-列表内容"><a href="#添加-ToDoList-列表内容" class="headerlink" title="添加 ToDoList 列表内容"></a>添加 ToDoList 列表内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class ToDoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            inputVal: &apos;&apos;,</span><br><span class="line">            list: [&apos;内容一&apos;, &apos;内容二&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; </span><br><span class="line">                value=&#123;inputVal&#125; </span><br><span class="line">                onChange=&#123;this.changeItem.bind(this)&#125; /&gt;</span><br><span class="line">            &lt;button onClick=&#123;this.addItem.bind(this)&#125;&gt;click me&lt;/button&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                        return (</span><br><span class="line">                            &lt;li </span><br><span class="line">                                key=&#123;item+index&#125; </span><br><span class="line">                                onClick=&quot;this.deleteItem.bind(this, index)&quot;&gt;</span><br><span class="line">                                &#123;item&#125;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        )</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/input&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    changeItem(e) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            inputVal: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    addItem() &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: [...this.state.list, this.state.inputVal],</span><br><span class="line">            inputVal: &apos;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deleteItem(index) &#123;</span><br><span class="line">        let list = this.state.list;</span><br><span class="line">        list.splice(1, index);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ToDoList</span><br></pre></td></tr></table></figure><h3 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h3><p>父组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">import ToDoListItem from &apos;ToDoListItem&apos;</span><br><span class="line"></span><br><span class="line">class ToDoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            inputVal: &apos;&apos;,</span><br><span class="line">            list: [&apos;内容一&apos;, &apos;内容二&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; </span><br><span class="line">                value=&#123;inputVal&#125; </span><br><span class="line">                onChange=&#123;this.changeItem.bind(this)&#125; /&gt;</span><br><span class="line">            &lt;button onClick=&#123;this.addItem.bind(this)&#125;&gt;click me&lt;/button&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                        return (</span><br><span class="line">                            &lt;ToDoListItem </span><br><span class="line">                                index=&#123;index&#125;</span><br><span class="line">                                content=&#123;item&#125; </span><br><span class="line">                                deleteItem=&#123;this.deleteItem.bind(this)&#125;</span><br><span class="line">                                key=&#123;item+index&#125; /&gt;</span><br><span class="line">                        )</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/input&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    changeItem(e) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            inputVal: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    addItem() &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: [...this.state.list, this.state.inputVal],</span><br><span class="line">            inputVal: &apos;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deleteItem(index) &#123;</span><br><span class="line">        let list = this.state.list;</span><br><span class="line">        list.splice(1, index);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ToDoList</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class TodoListItem extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;li onClick=&#123;this.deleteItem.bind(this)&#125;&gt;</span><br><span class="line">            &#123;this.props.content&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    deleteItem() &#123;</span><br><span class="line">        this.props.deleteItem(this.props.index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default TodoListItem</span><br></pre></td></tr></table></figure><h3 id="PropsTypes-校验传递的值"><a href="#PropsTypes-校验传递的值" class="headerlink" title="PropsTypes 校验传递的值"></a>PropsTypes 校验传递的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line"></span><br><span class="line">class TodoListItem extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;li onClick=&#123;this.deleteItem.bind(this)&#125;&gt;</span><br><span class="line">            &#123;this.props.content&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    deleteItem() &#123;</span><br><span class="line">        this.props.deleteItem(this.props.index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TodoListItem.propTypes = &#123;</span><br><span class="line">    content: PropTypes.string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">TodoListItem.defaultProp = &#123;</span><br><span class="line">    content: &apos;今天天气很不错~&apos;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">export default TodoListItem</span><br></pre></td></tr></table></figure><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><p>使用 <code>ref</code> 获取值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class ToDoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line"></span><br><span class="line">        this.state=&#123;</span><br><span class="line">            inputVal: &apos;&apos;,</span><br><span class="line">            list: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; </span><br><span class="line">                value=&#123;inputVal&#125; </span><br><span class="line">                ref=&#123;(input) =&gt; &#123;this.input=input&#125;&#125;</span><br><span class="line">                onChange=&#123;this.changeItem.bind(this)&#125; /&gt;</span><br><span class="line">            &lt;button onClick=&#123;this.addItem.bind(this)&#125;&gt;click me&lt;/button&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                        return &lt;li key=&#123;index+item&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    changeItem() &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            inputVal: this.input.value</span><br><span class="line">        &#125;, () =&gt; &#123;</span><br><span class="line">            // 回调函数中获取最新list数据 ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addItem() &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: [...this.state.list, this.state.inputVal],</span><br><span class="line">            inputVal: &apos;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>生命周期函数就是在某一时刻自动执行的函数。</p><ul><li><p>初始化阶段 （<code>Initialization</code>）</p></li><li><p>挂载阶段（<code>Mounting</code>）</p></li></ul><ul><li><code>componentWillMount</code>：组件即将挂在界面前执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount() &#123;</span><br><span class="line">    console.log(`componentWillMount`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>render</code>：页面 <code>props</code> 或 <code>state</code> 发生变化时执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    console.log(`render`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>componentDidMount</code>：组件挂在完成时执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    console.log(`componentDidMount`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求接口可以放在该生命周期中。</li></ul><ul><li>更新阶段 （<code>Updation</code>）</li></ul><ul><li>shouldComponentUpdate：在组件更新前自动执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate() &#123;</span><br><span class="line">    console.log(`shouldComponentUpdate`)</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求必须返回布尔值。</p><ul><li>componentWillUpdate：组件更新时执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentWillUpdate() &#123;</span><br><span class="line">    console.log(`componentWillUpdate`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>componentDidUpdate：组件更新后执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate() &#123;</span><br><span class="line">    console.log(`componentDidUpdate`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>componentWillReceiveProps：在子组件中使用，子组件接收 <code>prop</code> 该函数就会执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps() &#123;</span><br><span class="line">    console.log(`componentWillReceiveProps`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>子组件接收到父组件传递过来的参数，父组件render函数重新被执行，这个生命周期就会被执行。</p></li><li><p>也就是说这个组件第一次存在于Dom中，函数是不会被执行的;</p></li><li><p>如果已经存在于Dom中，函数才会被执行。 </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编写-ToDoList-列表&quot;&gt;&lt;a href=&quot;#编写-ToDoList-列表&quot; class=&quot;headerlink&quot; title=&quot;编写 ToDoList 列表&quot;&gt;&lt;/a&gt;编写 ToDoList 列表&lt;/h3&gt;&lt;p&gt;根据官网提示自行安装 &lt;code&gt;creat
      
    
    </summary>
    
    
      <category term="React" scheme="http://blog.yuanbeauty.com/categories/React/"/>
    
      <category term="React 基础" scheme="http://blog.yuanbeauty.com/categories/React/React-%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>For循环中使用ref</title>
    <link href="http://blog.yuanbeauty.com/archives/65239c83.html"/>
    <id>http://blog.yuanbeauty.com/archives/65239c83.html</id>
    <published>2020-08-21T16:00:00.000Z</published>
    <updated>2020-08-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目需求：</p><p>循环渲染笔记列表，修改当前笔记时，隐藏当前笔记在当前笔记原位置呈现文本框，保存按钮和取消按钮。当前笔记修改成功更新笔记列表；取消修改，隐藏当前文本框，保存按钮和取消按钮，呈现原有笔记。</p><p>循环渲染模版文件：</p><p>在     <code>ref</code> 上动态绑定数据，格式为：字符串 + 索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;li class=&quot;fs14 list-line pt10 pb5&quot; v-for=&quot;(item, index) in noteList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;div v-show=&quot;index == item.open&quot;&gt;</span><br><span class="line">&lt;p class=&quot;ellipsis mb5 fs16 lGray&quot;&gt;&#123;&#123; item.content &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-show=&quot;index == curr&quot;&gt;</span><br><span class="line">&lt;textarea :value=&quot;item.content&quot; :ref=&quot;\&apos;note\&apos;+index&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;p class=&quot;tar&quot;&gt;</span><br><span class="line">&lt;span class=&quot;mr10&quot; @click=&quot;updateNote(item, index)&quot;&gt;确定&lt;/span&gt;</span><br><span class="line">&lt;span @click=&quot;handleCancelUpdate(item, index)&quot;&gt;取消&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>根据 <code>ref</code> 获取当期的 <code>textarea</code> 值；打印输出 <code>ref</code> 是一个数组，根据数组特性输出每一个 <code>textarea</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">updateNote: function(item, index) &#123;</span><br><span class="line">var content = this.$refs[&apos;note&apos;+index][0].value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目需求：&lt;/p&gt;
&lt;p&gt;循环渲染笔记列表，修改当前笔记时，隐藏当前笔记在当前笔记原位置呈现文本框，保存按钮和取消按钮。当前笔记修改成功更新笔记列表；取消修改，隐藏当前文本框，保存按钮和取消按钮，呈现原有笔记。&lt;/p&gt;
&lt;p&gt;循环渲染模版文件：&lt;/p&gt;
&lt;p&gt;在     &lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.yuanbeauty.com/categories/Vue/"/>
    
      <category term="ref" scheme="http://blog.yuanbeauty.com/categories/Vue/ref/"/>
    
    
  </entry>
  
  <entry>
    <title>编写 jQuery postFrom 表单插件</title>
    <link href="http://blog.yuanbeauty.com/archives/2a58e9cf.html"/>
    <id>http://blog.yuanbeauty.com/archives/2a58e9cf.html</id>
    <published>2020-07-21T16:00:00.000Z</published>
    <updated>2020-07-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目需求：</p><p>选课界面，选择多个课程添加到购物车计算总价。添加到购物车的课程，点击“提交结算”跳转到订单确认列表，当前界面要呈现上个界面选择的课程，包括：课程名称，课程价格，课程班级等等。</p><p>解决方式：</p><p>使用 <code>get</code> 方式传参，该方法行不通。因为浏览器 <code>url</code> 承载内容较多况且也有限制大小。所以使用 <code>post</code> 方式提交数据，在下个界面接受上个界面传来的数据列表。</p><p>使用 <code>post</code> 提交，不能使用 <code>jQuery</code> 自带封装好的 <code>post</code> 方式提交数据。既然这样，得自己封装一个 <code>post</code> 提交数据。</p><p>步骤：</p><ul><li><p>使用 <code>extend</code> 封装一个 <code>post</code> 方法。</p></li><li><p>该 <code>post</code> 方法传入 <code>url</code> 参数和 <code>args</code> 参数，其中 <code>url</code> 是要跳转到下个界面的路径；<code>args</code> 是传入的数据，比如这里是添加到购物车的课程。</p></li><li><p>声明 <code>from</code>，<code>input</code> 变量；并且设置 <code>from</code> 的 <code>url</code> 地址。</p></li><li><p>遍历 <code>args</code> 参数，把每一条数据的具体值，绑定到 <code>input</code> 上面并设置 <code>type=&#39;hidden&#39;</code> 不可见。</p></li><li><p>遍历结束，<code>input</code> 追加到 <code>from</code> 上面；<code>from</code> 追加到 <code>body</code> 上面。</p></li><li><p>设置 <code>from</code> 提交，提交成功后，自动销毁。</p></li></ul><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.extend(&#123;</span><br><span class="line">StandardPost:function(url, args) &#123;</span><br><span class="line">var form = $(&quot;&lt;form method=&apos;post&apos; style=&apos;display:none&apos;&gt;&lt;/form&gt;&quot;), input;</span><br><span class="line">form.attr(&#123; &quot;action&quot;:url &#125;);</span><br><span class="line">$.each(args,function(key2,value2) &#123;</span><br><span class="line">$.each(value2,function(key,value) &#123;</span><br><span class="line">input = $(&quot;&lt;input type=&apos;hidden&apos;&gt;&quot;);</span><br><span class="line">input.attr(&#123; &quot;name&quot;:&apos;objectArray[&apos;+key2+&apos;][&apos;+key+&apos;]&apos;&#125;);</span><br><span class="line">input.val(value);</span><br><span class="line">form.append(input);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">form.appendTo($(&apos;body&apos;));</span><br><span class="line">form.submit();</span><br><span class="line">form.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目需求：&lt;/p&gt;
&lt;p&gt;选课界面，选择多个课程添加到购物车计算总价。添加到购物车的课程，点击“提交结算”跳转到订单确认列表，当前界面要呈现上个界面选择的课程，包括：课程名称，课程价格，课程班级等等。&lt;/p&gt;
&lt;p&gt;解决方式：&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;get&lt;/co
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yuanbeauty.com/categories/JavaScript/"/>
    
      <category term="jQuery postFrom" scheme="http://blog.yuanbeauty.com/categories/JavaScript/jQuery-postFrom/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器 Url 参数转化为对象</title>
    <link href="http://blog.yuanbeauty.com/archives/14ec002f.html"/>
    <id>http://blog.yuanbeauty.com/archives/14ec002f.html</id>
    <published>2020-06-20T16:00:00.000Z</published>
    <updated>2020-06-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目需求：</p><p>教师端，题库列表界面需要传入 <code>n</code> 个参数，后续还有可能新增参数。由于是旧项目后端在 <code>url</code> 路由设置参数，后续开发也不方便。因此，由前端自定义传参接收参数。</p><p>使用一般方式获取浏览器路有参数，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var search = window.location.search;</span><br><span class="line"></span><br><span class="line">if(search.indexOf(&apos;?&apos;) != -1) &#123;</span><br><span class="line">var val = search.split(&apos;?&apos;)[1];</span><br><span class="line">val = val.split(&apos;&amp;&apos;).slice(-1)[0];</span><br><span class="line">val = val.split(&apos;=&apos;)[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方式单独获取具体参数可以使用，如果获取多个参数就得考虑使用正则或者封装公共方法。</p><p>如何获取多个浏览器 <code>url</code> 参数？</p><p>下面是自己编写的方法，把浏览器参数存入对象中，以键值对的方式存在对象中。</p><p>步骤：</p><ul><li><p>获取浏览器参数，使用 <code>window.location.search</code>。</p></li><li><p>使用 <code>split</code> 切割参数取下标为 1 的数据。</p></li><li><p>声明一个全局对象，保存参数数据。</p></li><li><p>使用 <code>split</code> 切割 <code>&amp;</code> 符号。</p></li><li><p>循环遍历上一步骤的数组，使用 <code>split</code> 切割数组每项中的数据，以 <code>=</code> 为切割点。</p></li><li><p>设置每项的数据下标 <code>0</code> 为对象的键名，<code>1</code> 为对象的键值。</p></li><li><p>循环结束后，返回该对象。</p></li></ul><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function getUrlParams(name) &#123;</span><br><span class="line">    var search = url.split(&apos;?&apos;) &amp;&amp; url.split(&apos;?&apos;)[1];</span><br><span class="line">    var obj = &#123; &#125;;</span><br><span class="line">    search = search.split(&apos;&amp;&apos;);</span><br><span class="line">    for(var i=0; i &lt; search.length; i++) &#123;</span><br><span class="line">        var search_v = search[i].split(&apos;=&apos;);</span><br><span class="line">        obj[search_v[0]] = search_v[1];</span><br><span class="line">    &#125;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目需求：&lt;/p&gt;
&lt;p&gt;教师端，题库列表界面需要传入 &lt;code&gt;n&lt;/code&gt; 个参数，后续还有可能新增参数。由于是旧项目后端在 &lt;code&gt;url&lt;/code&gt; 路由设置参数，后续开发也不方便。因此，由前端自定义传参接收参数。&lt;/p&gt;
&lt;p&gt;使用一般方式获取浏览器路
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yuanbeauty.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>计算某天日期</title>
    <link href="http://blog.yuanbeauty.com/archives/1bbd2904.html"/>
    <id>http://blog.yuanbeauty.com/archives/1bbd2904.html</id>
    <published>2020-05-09T16:00:00.000Z</published>
    <updated>2020-05-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目需求：</p><p>根据现有日期，计算前几天日期或后几天的日期。</p><p>解决方式：</p><p>顺便编写一个公共方法，方便后续使用。使用 <code>setDate</code> 计算已知日期加上固定天数；日期转化成字符串使用 <code>padStart</code> 不足两位的补全 0。</p><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">initDate(day) &#123;</span><br><span class="line">let timeDate,Y,M,D,h,m,s;</span><br><span class="line">timeDate = new Date();</span><br><span class="line">timeDate.setDate(timeDate.getDate() + day);</span><br><span class="line">Y = timeDate.getFullYear();</span><br><span class="line">M = (timeDate.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line">D = timeDate.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">h = timeDate.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">m = timeDate.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">s = timeDate.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">return `$&#123;Y&#125;-$&#123;M&#125;-$&#123;D&#125; $&#123;h&#125;:$&#123;m&#125;:$&#123;s&#125;`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目需求：&lt;/p&gt;
&lt;p&gt;根据现有日期，计算前几天日期或后几天的日期。&lt;/p&gt;
&lt;p&gt;解决方式：&lt;/p&gt;
&lt;p&gt;顺便编写一个公共方法，方便后续使用。使用 &lt;code&gt;setDate&lt;/code&gt; 计算已知日期加上固定天数；日期转化成字符串使用 &lt;code&gt;padStart&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yuanbeauty.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo个人博客绑定域名</title>
    <link href="http://blog.yuanbeauty.com/archives/8a6c9ade.html"/>
    <id>http://blog.yuanbeauty.com/archives/8a6c9ade.html</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-04-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>申请域名已经很久，之前偶尔用用，没有用起来；最近想充分利用，在网上研究一番，现在配置成功可以使用，记下心得。</p><h3 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h3><p>在万网，新网等网站申请一个域名。本文以万网为例：</p><ul><li><p>首先注册阿里云账号，如果有淘宝账号的，可以直接登录。</p></li><li><p>登录以后，先进行实名认证（购买域名要用到）。</p></li><li><p>认证信息提交完毕后，可能需要一两天的审核时间。</p></li><li><p>认证完毕后回到首页，上方导航栏，产品-&gt;点击万网，搜索自己想要的域名并进行购买（域名持有者选择个人，这里就用到之前的认证）。</p></li><li><p>购买完毕后，回到首页点击右上方的控制台，进入后点击上方导航栏的产品与服务，然后选择域名，点击进入域名解析列表，然后就可以看到刚刚买的域名了，接下来进行解析配置（绑定）。</p></li></ul><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><p>登录成功阿里云，进入个人页面找到<strong>最近使用的产品</strong>文案，点击域名进入域名管理页面：</p><p><img src="/images/1_6.png" alt="域名"></p><p>在域名列表中找到自己想要解析的域名，点击域名右侧<code>解析</code>文案：</p><p><img src="/images/1_7.png" alt="域名列表"></p><p>进入到域名解析设置页面，如下图：</p><p><img src="/images/1_8.png" alt="域名解析设置"></p><ul><li><p>第一个红色框中，点击修改在<code>记录值</code>中填写自己的<code>github</code>博客地址，不需要<code>http://</code>前缀。</p></li><li><p>第二个红色框中，填写博客站点的<code>IP</code>，获取博客<code>IP</code>方式：</p></li></ul><p><code>win+R</code>快捷键打开“运行”窗口，输入<code>cmd</code>运行命令行控制台。</p><p>用以下指令获取自己博客站点的<code>IP</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping xxx.github.io</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正在 Ping xxx.github.io [185.xxx.xxx.153] 具有 32 字节的</span><br><span class="line">来自 xxx.xxx.xxx.xxx 的回复: 字节=32 时间=57ms TTL=48</span><br><span class="line">来自 xxx.xxx.xxx.xxx 的回复: 字节=32 时间=55ms TTL=48</span><br><span class="line">来自 xxx.xxx.xxx.xxx 的回复: 字节=32 时间=56ms TTL=48</span><br><span class="line">来自 xxx.xxx.xxx.xxx 的回复: 字节=32 时间=60ms TTL=48</span><br></pre></td></tr></table></figure><p>把获取到的<code>IP</code>填写在第二个红色框中。</p><h3 id="创建CNAME"><a href="#创建CNAME" class="headerlink" title="创建CNAME"></a>创建CNAME</h3><p>在本地博客站点路径下的source文件夹里，创建一个名为CNAME的文件（注意要大写），里面写上你之前购买的域名。</p><p>如下图：</p><p><img src="/images/1_9.png" alt="填写CNAME"></p><p>文件里的域名前加不加www都可以，具体规则如下：</p><ul><li>如果填写的是没有<code>www</code>的，比如 yuanbeauty.com，无论是访问 <code>http://www.yuanbeauty.com</code> 还是 <code>http://yuanbeauty.com</code> ，都会自动跳转到 <code>http://yuanbeauty.com</code>。</li></ul><ul><li>如果你填写的是其它子域名，比如 <code>abc.yuanbeauty.com</code>，访问 <code>http://abc.yuanbeauty.com</code> 没问题，但是访问 <code>http://yuanbeauty.com</code> ，不会自动跳转到 <code>http://abc.yuanbeauty.com</code>。</li></ul><h3 id="github绑定域名"><a href="#github绑定域名" class="headerlink" title="github绑定域名"></a>github绑定域名</h3><p>在<a href="https://github.com" target="_blank" rel="noopener">github</a>上，点击进入头像个人设置，如下图：</p><p><img src="/images/1_3.png" alt="setting"></p><p>点击存放个人博客的仓库，在<strong>仓库标题</strong>下面，有<code>setting</code>设置点击进入，</p><p><img src="/images/1_4.png" alt="setting"></p><p>在当前页面拉动滚动条找到<code>GitHub Pages</code>，填入购买的域名：</p><p><img src="/images/1_5.png" alt="github-pages"></p><p>重新生成个人博客，打包部署就能使用域名访问博客，执行命令：</p><ul><li><p><code>hexo clean</code> 清理缓存文件</p></li><li><p><code>hexo g</code> 生成静态文件</p></li><li><p><code>hexo d</code> 部署个人博客项目</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;申请域名已经很久，之前偶尔用用，没有用起来；最近想充分利用，在网上研究一番，现在配置成功可以使用，记下心得。&lt;/p&gt;
&lt;h3 id=&quot;申请域名&quot;&gt;&lt;a href=&quot;#申请域名&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://blog.yuanbeauty.com/categories/Hexo/"/>
    
      <category term="绑定域名" scheme="http://blog.yuanbeauty.com/categories/Hexo/%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>一小时的时间，入门 Webpack</title>
    <link href="http://blog.yuanbeauty.com/archives/d51a4c5a.html"/>
    <id>http://blog.yuanbeauty.com/archives/d51a4c5a.html</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2020-03-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前端构建工具 <code>Webpack</code> 最近特火，火到 <code>Vue</code>/<code>React</code> 官方推出的脚手架都是基于 <code>Webpck</code> 打造的。</p><p>为了更了解 <code>Webpack</code>，特意实打实地安装配置 <code>Webpack</code>。对以后进阶学习也能夯实基础，现在一起学习入门级的 <code>Webpack</code> 吧！</p><h3 id="认识-Webpack"><a href="#认识-Webpack" class="headerlink" title="认识 Webpack"></a>认识 Webpack</h3><p>先来观察应用 <code>Webpack</code> 能做的事：</p><p><img src="/images/webpack1-1.jpg" alt="webpack"></p><p>从图中得出：<code>Webpack</code> 能打包所有 <code>JS</code> 脚本；能打包所有 <code>style</code> 样式；能打包所有图片；能打包所有预编译语言。通俗的理解就是<strong>能打包前端所有资源</strong>。</p><h3 id="安装-Webpack"><a href="#安装-Webpack" class="headerlink" title="安装 Webpack"></a>安装 Webpack</h3><p>首先确保你已经安装了 <code>Node.js</code> 和 <code>Git</code>。找到存放项目的目录，在该目录下初始化项目。在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">// 或者</span><br><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><p>初始化后生成一个 <code>package.json</code> 文件，大致内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;study-webpack&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;study-webpack&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;yuan&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了后续快速安装其他依赖，这里使用淘宝镜像。在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>接来下安装 <code>Webpack</code>，在 <code>npm</code> 官网查询安装手册。在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm install --save-dev webpack</span><br><span class="line">// 或者</span><br><span class="line">$ yarn add webpack --dev</span><br></pre></td></tr></table></figure><p>附：使用 <code>yarn</code> 语法安装，确保已经安装 <code>yarn</code>。</p><p>注意：最新版本 <code>Webpack</code> 中 <code>webpack-cli</code> 从中分离了出来需要单独安装。在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>安装完 <code>Webpack</code> 之后需要其运行起来，得需要一个配置文件，其名称为 <code>webpack.config.js</code>，不能为其他名称。如果是其他名称 <code>Webpack</code> 找不到该配置文件，就抛出错误提示。</p><h3 id="运行-Webpack"><a href="#运行-Webpack" class="headerlink" title="运行 Webpack"></a>运行 Webpack</h3><p>查询官网手册后，填写 <code>webpack.config.js</code> 配置。对 <code>entry</code> 属性值和 <code>filename</code> 属性值进行简单修改，<code>webpack.config.js</code>  大致内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;bundle.js&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>module.exports</code> 导出一个对象，其中：</p><p><code>entry</code> 表示打包资源入口，该字段属性值可以是 <code>String</code> / <code>Array</code> / <code>Object</code>。</p><p><code>output</code> 表示打包资源出口，也就是经打包的资源从该口输出。</p><p><code>dist</code> 是 <code>Webpack</code> 打包完成后存放资源的目录。</p><p>配置完内容后，在根目录下创建目录 <code>src</code>，里面编写一个叫 <code>index.js</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// index.js</span><br><span class="line">document.write(&apos;Hello Webpack!&apos;);</span><br></pre></td></tr></table></figure><p>为了方便看效果，在根目录下创建一个 <code>index.html</code> 模版，并引入打包后的资源 <code>bundle.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;入门webpack&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用预定义命令启动 <code>Webpack</code>，可以在 <code>package.json</code> 文件中的 <code>scripts</code> 字段中添加命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 打包完成后会看到在根目录下生成 <code>dist</code> 目录，里面包含 <code>bundle.js</code> 脚本，在浏览器端运行 <code>index.html</code> 可以看到页面输出 <code>Hello Webpack</code>！。</p><p>到此完成了 <code>Webpack</code> 初步的打包。</p><p>执行 <code>Webpack</code> 打包时，终端执行输出一些信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hash: 9d157b09dd8d37122dad</span><br><span class="line">Version: webpack 4.42.1</span><br><span class="line">Time: 560ms</span><br><span class="line">Built at: 2020-04-19 11:48:36</span><br><span class="line">    Asset       Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  961 bytes       0  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[0] ./src/index.js 31 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><ul><li><p><code>Hash</code> 表示当前文件打包生成的 <code>hash</code> 值，文件改变，<code>hash</code> 值就会变。</p></li><li><p><code>Version</code> 表示项目当前安装 <code>Webpack</code> 的版本。</p></li><li><p><code>Time</code> 表示项目打包所花费的时间。</p></li><li><p><code>Build</code> 表示项目打包日期，打包生成文件名称和文件大小</p></li><li><p><code>Entrypoint</code> 表示项目打包入口点。</p></li></ul><p>即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 等价于</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: &apos;./src/index.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>chunks</code>: 打包文件的 <code>id</code>，现在只有一个 <code>bundle.js</code> 打包文件，有多个的时候，会有多个不同的 <code>chunk</code>。</p></li><li><p><code>Chunk Names</code>: 打包文件的名字。</p></li></ul><p>最后一行表示打包生成的文件路径。</p><p>大多数网站中都会使用缓存，减少页面加载时长。</p><p><code>Webpack</code> 打包也可以做到这点，把之前的 <code>bundle.js</code> 改成带有 <code>hash</code> 值。</p><p>修改后的 <code>webpack.config.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"> </span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;[hash].js&apos; // hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重新运行 <code>cnpm start</code> 打包完成后会看到根目录下生成 <code>dist</code> 目录，里面包含带 <code>hash</code> 值的资源。如果想缩短 <code>hash</code> 值，可以进行截取长度，比如：<code>[hash:6]</code>。</p><p>如果想要优化打包后的资源和想使用 <code>Webpack</code> 强大的功能，请继续往下看。</p><h3 id="认识-Plugin"><a href="#认识-Plugin" class="headerlink" title="认识 Plugin"></a>认识 Plugin</h3><p><code>plugin</code> 是 <code>Webpack</code> 的核心，<code>Webpack</code> 自身的多数功能都是用这个插件接口，让 <code>Webpack</code> 打包变得极其灵活。</p><p>经过认识 <code>Webpack</code> 初次打包后，发现每次执行 <code>cnpm start</code> 打包完成后都会在 <code>dist</code> 目录中追加打包生成后的新资源。造成 <code>dist</code> 文件很大。这时 <code>clean-webpack-plugin</code> 就可以登场，帮助我们解决这个问题。</p><p>在 <code>npm</code> 官网搜索该插件，点击名称进入详情查看安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm i --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加该配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; =require(&apos;clean-webpack-plugin&apos;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.ProgressPlugin(),</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 会看到上一次打包生成的资源自动删除后，重新创建新的打包资源。</p><p>如果在项目中要引入打包后的资源，并且该资源带有 <code>hash</code> 值时不易方便使用，脚本太多也不易区分，这时可以使用 <code>Webpack</code> 提供的 <code>HTML</code> 模版插件解决问题。</p><p>在 <code>npm</code> 官网搜索该插件，点名称进去查看安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm i --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>安装成功后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到该插件和该插件的版本。</p><p>在 <code>Webpack</code> 中配置该插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;[hash:6].js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin() // htmlPlugin</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 会看到在根目录下生成 <code>dist</code> 目录，里面包含带 <code>hash</code> 值的资源和压缩过的 <code>index.html</code>。</p><p>如果不想使用压缩过的资源，可以在 <code>webpack.config.js</code> 中进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// ...</span><br><span class="line">module.exports = &#123; </span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <code>mode</code> 参数 <code>Webpack</code> 会区分是生产环境还是开发环境。一般生成环境 <code>mode</code> 设置为 <code>production</code>，开发环境设置为 <code>development</code>。</p><p>设置完成后，在终端执行 <code>cnpm start</code> 打包完成后，然后在浏览器上运行 <code>index.html</code> 可以看到输出内容没变化，页面代码没有压缩。</p><p>如果想对 <code>src/index.html</code> 做一些调整，比如：修改 <code>title</code>，创建多个模版文件，多个模版文件引入不同的脚本等等；只需要在 <code>new HtmlWebpackPlugin()</code> 中添加一些配置项就能解决。</p><p>比如修改 <code>title</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">     new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: &apos;学习webpack&apos;</span><br><span class="line">     &#125;)</span><br><span class="line">  // ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 打包完成后，在浏览器上运行 <code>index.html</code> 会看到 <code>title</code> 的变化。</p><p>项目难免会美化页面，那么就得给页面添加一些样式，可以写在单独文件中，可以写在 <code>.html</code> 模版中，这时处理 <code>CSS</code> 可以使用 <code>css-loader</code> 解决问题。</p><h3 id="认识-loader"><a href="#认识-loader" class="headerlink" title="认识 loader"></a>认识 loader</h3><p><code>loader</code> 用于对模块的源代码进行转换。<code>loader</code> 可以在 <code>import</code> 或”加载”模块时预处理文件。可以将文件从不同的语言（如 <code>TypeScript</code>）转换为 <code>JavaScript</code>，或将内联图像转换为 <code>data URL</code>。<code>loader</code> 甚至允许直接在 <code>JavaScript</code> 模块中 <code>import CSS</code> 文件。</p><p>①、处理 CSS</p><p>首先安装处理 <code>CSS</code> 相应的 <code>loader</code>：<code>css-loader</code> 和 <code>style-loader</code>。</p><p>在 <code>npm</code> 官网搜索该 <code>loader</code>，点击名称进去查看安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm i --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure><ul><li><p><code>css-loader</code> 处理以 <code>.css</code> 后缀的文件。</p></li><li><p><code>style-loader</code> 经过 <code>css-loader</code> 处理过的 <code>CSS</code> 插入到 <code>DOM</code> 中。</p></li></ul><p>安装成功后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到该 <code>loader</code> 和该 <code>loader</code> 的版本。</p><p>在 <code>webpack.config.js</code> 中添加处理 <code>CSS</code> 的 <code>loader</code> 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.css$/,</span><br><span class="line">          use: [ </span><br><span class="line">            &#123; loader: &quot;style-loader&quot; &#125;,  </span><br><span class="line">            &#123; loader: &quot;css-loader&quot; &#125; </span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>use</code> 选项顺序，先使用 <code>css-loader</code> 再使用 <code>style-loader</code>。</p><p>项目中一般都是使用单独文件写入样式，这里使用以 <code>.css</code> 为后缀的文件负责控制页面样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*&#123; margin:0px;padding:0px;&#125;</span><br><span class="line">body&#123; background: red; &#125;</span><br></pre></td></tr></table></figure><p>在根目录 <code>src/index.js</code> 中引入该样式文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write(&apos;hello webpack&apos;) </span><br><span class="line">require(&apos;./style.css&apos;)</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 打包完成后，在浏览器上运行 <code>index.html</code>，能看到页面背景色变红色。使用开发者工具也能看到页面插入 <code>style</code> 标签，<code>style</code> 标签里面嵌入刚刚写的样式：</p><p><img src="/images/webpack1-2.jpg" alt="webpack"></p><p>随着项目复杂度的提升，控制页面的样式也很多；如果按照这样写法，页面会有一大段来控制样式，考虑到对后期的性能优化不友好，可以考虑把样式单独打包一个文件。</p><p>②、提取 CSS</p><p>新版本 <code>Webpack4.x</code> 建议使用 <code>mini-css-extract-plugin</code>。</p><p>在 <code>npm</code> 官网搜索该插件，点击名称进去查看安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>安装完该插件后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到该插件和该插件的版本。</p><p>在 <code>webpack.config.js</code> 中的 <code>module</code> 选项和 <code>plugin</code> 选项中配置该插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.css$/,</span><br><span class="line">          use: [ </span><br><span class="line">            &#123; loader: &quot;style-loader&quot; &#125;,  </span><br><span class="line">            &#123;</span><br><span class="line">                loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  esModule: true,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &apos;css-loader&apos;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: &apos;学习webpack&apos;</span><br><span class="line">      &#125;),</span><br><span class="line">      new MiniCssExtractPlugin(&#123; </span><br><span class="line">        filename: &apos;style.css&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 打包完成后，在浏览器上运行 <code>index.html</code>，可以看到与之前效果一样；使用开发者工具能看到生成的样式文件 <code>style.css</code>，之前嵌套在页面中的样式不见了。</p><p>效果如下：</p><p><img src="webpack1-3.jpg" alt="webpack"></p><p>大型项目中一般会选择应用预编译语言，这里使用 <code>Sass</code> 预编译语言。</p><p>在 <code>nmp</code> 官网搜索该 <code>loader</code>，点击名称进去查看使用安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm install --save-dev sass-loader node-sass</span><br></pre></td></tr></table></figure><p>安装完毕后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到该 <code>loader</code> 和该 <code>loader</code> 的版本。</p><p>在 <code>webpack.config.js</code> 中的 <code>module</code> 选项中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      // ...</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.s[ac]ss$/i,</span><br><span class="line">            use: [</span><br><span class="line">              // Creates `style` nodes from JS strings</span><br><span class="line">              &apos;style-loader&apos;,</span><br><span class="line">              // Translates CSS into CommonJS</span><br><span class="line">              &apos;css-loader&apos;,</span><br><span class="line">              // Compiles Sass to CSS</span><br><span class="line">              &apos;sass-loader&apos;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样在根目录 <code>src</code> 下创建一个专门存放 <code>sass</code> 样式文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// index.scss</span><br><span class="line">$fontSize: 16px;</span><br><span class="line">body&#123; font-size:$fontSize;&#125;</span><br></pre></td></tr></table></figure><p>在根目录 <code>src/index.js</code> 中引入该 <code>scss</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">document.write(&apos;hello webpack&apos;) </span><br><span class="line">require(&apos;./style.css&apos;)</span><br><span class="line">require(&apos;./index.scss&apos;)</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 打包完成后，在浏览器上运行 <code>index.html</code>，能看到页面字体变化。</p><p>③、打包图片</p><p>打包处理图片使用 <code>url-loader</code> 和 <code>file-loader</code>。</p><p>在 <code>npm</code> 官网搜索该 <code>loader</code>，点击名称进去查看安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm install url-loader file-loader --save-dev</span><br></pre></td></tr></table></figure><p>安装完该插件后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到该 <code>loader</code> 和该 <code>loader</code> 的版本。</p><p>在 <code>webpack.config.js</code> 中的 <code>module</code> 选项中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">       // ...</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.(png|jpe?g|gif)$/i,</span><br><span class="line">            loader: &apos;file-loader&apos;,</span><br><span class="line">            options: &#123;</span><br><span class="line">                outputPath: &apos;images&apos;,</span><br><span class="line">                name: &apos;[1]-[name].[ext]&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>style.css</code> 样式文件中引入一张图片作为背景图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*&#123; margin:0px;padding:0px;&#125;</span><br><span class="line">body&#123; background-color: red; &#125;</span><br><span class="line">body&#123; background: url(&apos;./webpack1-3.jpg&apos;) repeat-x; &#125;</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 打包完成后，在浏览器上运行 <code>index.html</code>，能看到之前的背景色被改变了。</p><p>技术不断创新，前端技术领域也是如此。新项目中越来越喜欢使用 <code>ES6</code> 作为处理 <code>JS</code> 页面数据交互，接下来继续打包 <code>ES6</code>。</p><p>④、打包 ES6</p><p>打包处理 <code>ES6</code> 使用 <code>babel-loader</code>、<code>babel-core</code>、<code>babel-preset-env</code>、<code>babel-preset-es2015</code>。</p><p>在 <code>npm</code> 官网搜索该 <code>loader</code>，点击名称金进去查看安装手册，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i babel-loader babel-core babel-preset-env babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure><p>附：如果运行出错可以安装：<code>@babel/core</code>，<code>@babel/preset-env</code>；其中<code>babel-loader</code> 转换 <code>js</code> 加载器；<code>@babel/core</code> 为 <code>babel</code> 的核心模块；<code>@babel/preser-env</code> 将 <code>ES6</code> 转为 <code>ES5</code>；<code>babel-preset-es2015</code>将部分 <code>ES6</code> 转化成 <code>ES5</code> 语法。</p><p>安装完该插件后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到该 <code>loader</code> 和该 <code>loader</code> 的版本。</p><p>在 <code>webpack.config.js</code> 中的 <code>module</code> 选项中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">       // ...</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.m?js$/,</span><br><span class="line">            exclude: /(node_modules|bower_components)/,</span><br><span class="line">            use: &#123;</span><br><span class="line">              loader: &apos;babel-loader&apos;,</span><br><span class="line">              options: &#123;</span><br><span class="line">                  presets: [&apos;@babel/preset-env&apos;]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中处理页面数据交互一般都是存放单独脚本文件，因此在根目录下中的 <code>src</code> 目录下创建一个脚本文件 <code>es6.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let today = &apos;今天天气很好&apos;;</span><br><span class="line">alert(today);</span><br></pre></td></tr></table></figure><p>在根目录 <code>src/index.js</code> 中引入该脚本文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">document.write(&apos;hello webpack&apos;) </span><br><span class="line">require(&apos;./style.css&apos;)</span><br><span class="line">require(&apos;./es6.js&apos;)</span><br></pre></td></tr></table></figure><p>此时运行 <code>cnpm install</code> 肯定会报错，因为需要设置 <code>babel</code>。在根目录下创建 <code>.babelre</code> 大致内容大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &apos;presets&apos;:[&apos;env&apos;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时在终端执行 <code>cnpm start</code> 打包完成后，在浏览器上运行 <code>index.html</code>，能看到页面弹出的语句。</p><p>目前为止打包生成的 <code>index.html</code> 模版每次都得重新刷新页面。为了提高开发效率 <code>Webpack</code> 提供了开启服务热更新替换，不用刷新界面就能实现热更新。下面实现自动开启服务热更新。</p><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><p>查看 <code>Webpack</code> 手册安装相关模块，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm i --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p>安装成功后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到 <code>dev-server</code> 和 <code>dev-server</code> 的版本</p><p>在 <code>webpack.config.js</code> 中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">  const webpack = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">   // ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      contentBase:path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">      host: &apos;localhost&apos;,</span><br><span class="line">      port:8090,</span><br><span class="line">      open: true,  // 自动打开浏览器</span><br><span class="line">      hot: true  // 热更新</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>修改 <code>package.json</code> 文件中的 <code>scripts</code> 字段里面的 <code>start</code> 属性对应的属性值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;start&quot;: &quot;webpack-dev-server&quot;,</span><br><span class="line">   &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> // ...</span><br></pre></td></tr></table></figure><p>也可以添加新的自定义启动 <code>Webpack</code> 命令，如 <code>run</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;run&quot;: &quot;webpack-dev-server&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure><p>在终端执行 <code>cnpm start</code> 或者 <code>cnpm run</code> 会看到浏览器自动打开生成的 <code>index.html</code>。然后在 <code>styl.css</code> 中添加样式，如：<code>font-size:30px</code> 页面会自动更新并显示最新内容。</p><p>项目中或许会用到 <code>jQuery</code> 库或者 <code>Vue</code>，那么如何使用呢？继续往下看。</p><h3 id="快捷导入"><a href="#快捷导入" class="headerlink" title="快捷导入"></a>快捷导入</h3><p>首先在 <code>npm</code> 官网查询要安装的包，如 <code>jQuery</code>，在终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cnpm install --save-dev jquery</span><br></pre></td></tr></table></figure><p>安装完毕之后，在根目录 <code>package.json</code> 中的 <code>devDependencies</code> 里能看到 <code>jQuery</code> 和 <code>jQuery</code> 的版本。</p><p>在 <code>webpack.config.js</code> 中的 <code>plugins</code> 选项中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">modules.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    // ...</span><br><span class="line">      new webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: &apos;jquery&apos;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便看效果，在根目录下的 <code>src</code> 中创建新的文件，如：<code>es5.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// es5.js</span><br><span class="line">$(&apos;body&apos;).text(&apos;Hello World!!!&apos;)</span><br></pre></td></tr></table></figure><p>在根目录 <code>src/index.js</code> 中引入该脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.write(&apos;hello webpack&apos;) </span><br><span class="line">require(&apos;./style.css&apos;)</span><br><span class="line">require(&apos;./es6.js&apos;)</span><br><span class="line">require(&apos;./es5.js&apos;)</span><br></pre></td></tr></table></figure><p>这时在页面上能看到 <code>Hello World!!!</code> 字样。到此为止一个入门级带有热更新的 <code>Webpack</code> 学习完毕。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到这里入门级 <code>Webpack</code> 就算结束了。以上内容从认识 <code>Webpack</code> 到使用各种 <code>loader</code> 和各种 <code>plugins</code> 打包生成资源应用在项目中，认识了基本的使用语法和应用各种配置，也为以后进阶的学习夯实基础。</p><p>针对不同的项目，还有更多的 <code>Webpack</code> 打包细节需要调优，如：如何减少搜索文件；如何提高 <code>loader</code> 的打包速度；如何排除项目中无用的打包文件等等。在接下来的时间里，慢慢研究与学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前端构建工具 &lt;code&gt;Webpack&lt;/code&gt; 最近特火，火到 &lt;code&gt;Vue&lt;/code&gt;/&lt;code&gt;React&lt;/code
      
    
    </summary>
    
    
      <category term="Webpack" scheme="http://blog.yuanbeauty.com/categories/Webpack/"/>
    
      <category term="入门 Webpack" scheme="http://blog.yuanbeauty.com/categories/Webpack/%E5%85%A5%E9%97%A8-Webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>TypeSctipt 配置</title>
    <link href="http://blog.yuanbeauty.com/archives/f898a10a.html"/>
    <id>http://blog.yuanbeauty.com/archives/f898a10a.html</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2020-02-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>TypeScript 是 JavaScript 的超集，是一种编程语言，包含静态类型和面向对象。</p><p>适用于多人协作和大型应用。</p><p>TypeScript vs JavaScript</p><ul><li><p>应用程序。</p></li><li><p>是 JS 超集。</p></li><li><p>跨平台，且开源。</p></li><li><p>开始于 JS，终止于 JS。</p></li><li><p>重用 JS，甚至可以引入 JS 流行的库。</p></li><li><p>TS 提供类，接口， 模块。</p></li></ul><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>初始化项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>生成配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>安装 TS/node 包，解决模块生成文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --dev-save @types/node</span><br></pre></td></tr></table></figure><p>编写 helloWord.ts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let str:string = &apos;hello Word&apos;</span><br><span class="line"></span><br><span class="line">console.log(str)</span><br></pre></td></tr></table></figure><p>终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tes helloWord.ts</span><br><span class="line"></span><br><span class="line">node helloWord.js</span><br></pre></td></tr></table></figure><p>最新版安装 ts-node 包进行打包生成文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ts-node</span><br></pre></td></tr></table></figure><h3 id="TS-中使用-jQuery"><a href="#TS-中使用-jQuery" class="headerlink" title="TS 中使用 jQuery"></a>TS 中使用 jQuery</h3><p>如果只想简单粗暴方式使用。</p><p>在页面引用jQuery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在 TS 文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">declare var $:any;</span><br><span class="line"></span><br><span class="line">// ... ts 内容</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;TypeScript 是 JavaScript 的超集，是一种编程语言，包含静态类型和面向对象。&lt;/p&gt;
&lt;p&gt;适用于多人协作和大型应用。&lt;
      
    
    </summary>
    
    
      <category term="TypeSctipt" scheme="http://blog.yuanbeauty.com/categories/TypeSctipt/"/>
    
      <category term="TS 配置" scheme="http://blog.yuanbeauty.com/categories/TypeSctipt/TS-%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 创建多账号</title>
    <link href="http://blog.yuanbeauty.com/archives/aff47974.html"/>
    <id>http://blog.yuanbeauty.com/archives/aff47974.html</id>
    <published>2020-01-03T16:00:00.000Z</published>
    <updated>2020-01-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用 <code>Git</code> 过程中，难免会遇到使用 <code>Git</code> 既管理公司项目，又要管理自己个人项目。那么 <code>Git</code> 如何做到呢？是本篇主要讨论的内容，在这里做下笔记。</p><h3 id="生成新-ssh-key"><a href="#生成新-ssh-key" class="headerlink" title="生成新 ssh key"></a>生成新 ssh key</h3><p>确保已经安装了 <code>Git</code>，在电脑上打开 <code>Git</code> 创建 <code>ssh key</code>。如果已经存在一个 <code>ssh key</code> 那么需要生成第二个 <code>ssh key</code>，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygn -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>为了与之前的 <code>ssh</code> 区分，可以重新命名以 <code>id_rsa_me</code> 重新命名。回车，重复确认回车即可。</p><h3 id="添加新-ssh-key"><a href="#添加新-ssh-key" class="headerlink" title="添加新 ssh key"></a>添加新 ssh key</h3><p>默认 <code>ssh</code> 只会读取 <code>id_rsa</code>，所以为了让 <code>ssh</code> 识别新的私钥，需要将其添加到 <code>ssh agent</code>。</p><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_me</span><br></pre></td></tr></table></figure><p>如果报错 <code>Could not open a connection to your authentication agent.</code>无法连接到 <code>ssh agent</code> 可执行 <code>ssh-agent bash</code> 命令后再执行 <code>ssh-add</code> 命令。</p><p>然后将公钥添加到 <code>Git</code> 帐号。</p><h3 id="配置-config-文件"><a href="#配置-config-文件" class="headerlink" title="配置 config 文件"></a>配置 config 文件</h3><p>查看 <code>.ssh</code> 文件中是否存在 <code>config</code> 文件。</p><p>如果存在，可以直接编辑 <code>config</code> 文件。可以使用 <code>Sublime Text</code> 编辑器进行编辑。</p><p>如果不存在，需要创建 <code>config</code> 文件，使用 <code>touch config</code> 命令创建，然后再编辑 <code>config</code> 文件。</p><p>对 <code>config</code> 文件进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 第一个账号</span><br><span class="line">Host xxx.com</span><br><span class="line">    HostName xxx.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 第二个账号</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_me</span><br></pre></td></tr></table></figure><h3 id="测试是否配置成功"><a href="#测试是否配置成功" class="headerlink" title="测试是否配置成功"></a>测试是否配置成功</h3><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -T git@zc</span><br></pre></td></tr></table></figure><p>如果出现欢迎语，则表示配置成功。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>创建 <code>Git</code> 多账号时，注意创建新的 <code>ssh key</code> 与默认 <code>ssh key</code> 区分，再创建 <code>config</code> 文件进行配置帐号进行管理。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;Git&lt;/code&gt; 过程中，难免会遇到使用 &lt;code&gt;Git&lt;/code&gt; 既管理公司项目，又要管理自己个人项目。那么
      
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.yuanbeauty.com/categories/Git/"/>
    
      <category term="创建多帐号" scheme="http://blog.yuanbeauty.com/categories/Git/%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B8%90%E5%8F%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>总结Vue使用技巧</title>
    <link href="http://blog.yuanbeauty.com/archives/efcc221b.html"/>
    <id>http://blog.yuanbeauty.com/archives/efcc221b.html</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>Vue3.x版本已经在路上，在到来之前总结Vue2.x版本开发经验，趁机打好Vue2.x版本基础，本文列举以下开发技巧：</p><h3 id="导入组件"><a href="#导入组件" class="headerlink" title="导入组件"></a>导入组件</h3><p>原始写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import ChapterTitle from &apos;@/components/list/ChapterTitleCom&apos; </span><br><span class="line">import CourseList from &apos;@/components/list/CourseListCom&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  // ...略</span><br><span class="line">  components: &#123; ChapterTitle, CourseList &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>避免写重复代码，可以参考webpack官网使用require.context写法；无论有多少文件，都能引入使用。</p><p>官网例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require.context(&apos;./test&apos;, false, /\.js$/)</span><br></pre></td></tr></table></figure></p><p>require.context函数接受三个参数</p><ul><li>读取文件路径</li><li>是否遍历文件子目录</li><li>匹配文件的正则</li></ul><p>结合前端工程化，可以应用在Vue引入组件情景<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const files = require.context(&apos;@/components/list&apos;, false, /\.vue$/)</span><br><span class="line">const modules = &#123;&#125;</span><br><span class="line">files.keys().forEach(key =&gt; &#123;</span><br><span class="line">  const path = path.basename(key, &apos;.vue&apos;)</span><br><span class="line">  modules[path] = files(key).default || files(key)</span><br><span class="line">&#125;)</span><br><span class="line">components: modules</span><br></pre></td></tr></table></figure></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><p>beforeCreate 创建之前，在实例化之后，数据观测与事件配置之前被调用。</p></li><li><p>created 创建之后，在实例化完成后被调用。实例化已经完成相关配置，如：数据观测属性和方法运算，事件回调。此时$el属性不可见，挂载阶段没开始，一般在该周期发起ajax请求。</p></li><li><p>beforeMounted 挂载前，准备挂载阶段。模版在内存中编译完成，没有真正渲染到DOM页面，页面看不到真实数据。</p></li><li><p>mounted 挂载成功。$el被创建的vm.$el替换，此时页面已经真正渲染好，可以看到真实数据。</p></li><li><p>beforeUpdate 数据更新时调用。拿到最新data，在内存中重新渲染一颗新的DOM树，还没有挂载到页面，此时页面呈现的是旧数据。</p></li><li><p>updated 页面DOM已更新完毕，data中数据是最新的，页面呈现数据是最新data。</p></li><li><p>beforeDestory 实例销毁之前调用，此时组件还没销毁，能正常使用。如data，methods还能访问；该周期在服务端渲染期间不被调用。</p></li><li><p>destory 实例销毁之后，组件已完成销毁。如：此时data，methods都不可用。 </p></li></ul><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>可以存放各种数据类型；在数据变化时，相关视图用到的数据同步更新；data称为动态数据，任何情况下，都可以修改数据类型和数据结构。</p><p>代码片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default() &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      str: &apos;vue&apos;,</span><br><span class="line">      num: 6,</span><br><span class="line">      bol: true,</span><br><span class="line">      obj: &#123;</span><br><span class="line">        name: &apos;js&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      fn: function() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/scritp&gt;</span><br></pre></td></tr></table></figure></p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>Vue提供了侦听属性watch，使用通用方式观察和响应Vue实例数据变化，watch可以执行ajax异步获取数据，操作DOM等任何逻辑。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;() =&gt; (a += 1)&quot;&gt;click me&lt;/button&gt; </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; </span><br><span class="line">      a: 1, </span><br><span class="line">      obj: &#123;</span><br><span class="line">        b: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    a: function(oldVal, newVal) &#123;</span><br><span class="line">      console.log(oldVal, newVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;obj.b&apos;: function(oldVal, newVal) &#123;  </span><br><span class="line">      console.log(oldVal, newVal) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>实际遇到场景：组件创建时候初始化加载查询接口；监听input框，当input值发生变化时候重新加载筛选后的列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  created: &#123;</span><br><span class="line">    this.getCourseList()</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    inptVal: &#123;</span><br><span class="line">      this.getCourseList() </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>使用watch提供的immediate与handler简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  watch: &#123;</span><br><span class="line">    inpt: &#123;</span><br><span class="line">      handler: &apos;getCourseList&apos;,</span><br><span class="line">      immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>声明<strong>immediate:true 表示创建组件时立马执行一次</strong>。</p><p>利用watch提供deep属性，深度监听复杂数据类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; obj.a&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;() =&gt; (obj.a += 1)&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;  </span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;  </span><br><span class="line">      obj: &#123; </span><br><span class="line">        a: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    obj: &#123; </span><br><span class="line">      handler: function(oldVal, newVal) &#123;</span><br><span class="line">        console.log(oldVal, newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true,</span><br><span class="line">      immediate: true</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>如果修改对象obj中a属性的值，不添加deep:true，只能监听对象obj的改变，不会触发回调。</p><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>计算属性自动监听依赖值的变化，在监听值的变化时，触发一个回调；它有以下几点：</p><ul><li>数据是响应式</li><li>可以进行数据逻辑处理，减少模版中计算逻辑</li><li>可以对计算属性中的数据监听</li></ul><p>computed由两部分组成get和set，默认只有get，set需要手动添加，set不是直接修改计算属性，是修改它的依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> fullName: &#123;</span><br><span class="line">   get: function() &#123;</span><br><span class="line">      return this.firstName + &apos;--&apos; + this.lastName</span><br><span class="line">   &#125;,</span><br><span class="line">   set:function(newVal) &#123;</span><br><span class="line">      // this.firstName = newVal; // 抛出error</span><br><span class="line">      var name = newVal.split(&apos;--&apos;);</span><br><span class="line">      this.firstName = name[0]; // 对它的依赖赋值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>计算属性与普通属性区别:<br>计算属性可以像普通属性一样在模版中绑定计算属性，并且计算属性值是一个函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    msg: function() &#123;</span><br><span class="line">      return &apos;vue&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>计算属性与方法区别:<br><strong>computed可以缓存，只要相关依赖值没有发生变化，计算属性得到的值是之前缓存计算结果，不会多次执行</strong>；从上述代码发现必须要有return返回值；methods不能缓存。</p><p>除此之外，computed不能执行异步任务，计算属性必须是同步执行；watch同步与异步都可以操作，并且没有return。可以总结为computed能做的，watch都能做，反之不可以。</p><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><p>组件实例作用域相互独立，不同组件之间的数据无法相互引用，针对不同场景使用不同组件传值方式。</p><ul><li>父组件向子组件传值</li></ul><p>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;List :list=&quot;list&quot;&gt;&lt;/List&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import List from &apos;@components/List&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">       list: [&apos;小社区&apos;, &apos;社区&apos;, &apos;大社区&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    List </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, index)in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;List&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    list: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      required: true </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>在子组件接收props支持数组和对象形式，<strong>推荐使用对象形式更严谨</strong>。其中type值可为：string/number/boolean/function/object/Symbol；</p><p>required:true 表示是否必传。</p><p>props在数据传递时不能修改它的数据类型，而且在子组件不允许直接操作传递过来的props，可通过其它方式简介修改，如：使用computed计算属性；也可以在组件data中重新定义。</p><p>父组件向子组件传递数据，组件中的数据有三种形式：data/props/computed。</p><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;List :list=&quot;list&quot; @updateName=&quot;getName&quot;&gt;&lt;/List&gt;  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import List from &apos;@components/List&apos;</span><br><span class="line"> export default &#123;</span><br><span class="line">    methdds: &#123;</span><br><span class="line">      getName: function(name) &#123;</span><br><span class="line">         console.log(name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      List</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, index)&quot;</span><br><span class="line">       :key=&quot;index&quot; </span><br><span class="line">       @click=&quot;getMyName(item)&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getMyName: function(name) &#123;</span><br><span class="line">      this.$emit(&apos;updateName&apos;, name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="emit与-on"><a href="#emit与-on" class="headerlink" title="$emit与$on"></a>$emit与$on</h3><p>声明一个全局Vue实例变量把所有通信数据，事件监听都存储到这个变量，实现任何组件间的通信，包括跨级、父子、兄弟；这种方式推荐小项目。</p><p>实现原理：使用$emit和$on并实例化一个全局Vue实现数据共享。</p><p>main.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default Bus = new Vue()</span><br></pre></td></tr></table></figure></p><p>组件B<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">     @click=&quot;sendC&quot;&gt;</span><br><span class="line">     click me</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &apos;main&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendC: function() &#123;</span><br><span class="line">      Bus.$emit(&apos;msg&apos;, &apos;来自组件B&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>组件C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &apos;main&apos;</span><br><span class="line">export default&#123;</span><br><span class="line">  mounted: &#123;</span><br><span class="line">    this.getVal();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getVal: function() &#123;</span><br><span class="line">      Bus.$on(&apos;msg&apos;, msg=&gt; &#123;</span><br><span class="line">        console.log(msg);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h3><p>包含父作用域中不被prop所识别的特征绑定(class和style除外)。当一个组件没有声明任何prop时，这里包含所有父作用域的绑定(class和style除外)，并且可以通过v-bind=”$attrs”传入组件内部。</p><p>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     &lt;Child </span><br><span class="line">        name=&quot;name&quot; </span><br><span class="line">        age=&quot;age&quot; </span><br><span class="line">        height=&quot;height&quot;</span><br><span class="line">        title=&quot;web&quot;&gt;</span><br><span class="line">     &lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> import Child from &apos;@/components/Child&apos;</span><br><span class="line"> export default &#123;</span><br><span class="line">   data() &#123;</span><br><span class="line">     return &#123;</span><br><span class="line">       name: &apos;vue&apos;,</span><br><span class="line">       age: 6,</span><br><span class="line">       height: 180</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">   inheritAttrs: false,</span><br><span class="line">   props: &#123;</span><br><span class="line">     height: String,</span><br><span class="line">     default: &apos;&apos;</span><br><span class="line">   &#125;,</span><br><span class="line">   mounted() &#123;</span><br><span class="line">     console.log(this.$attrs);</span><br><span class="line">      // &#123; name: &quot;vue&quot;, age: 6, title: &apos;web&apos; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>inheritAttrs默认值为true，设置false就隐藏，关闭自动挂载到组件根元素上的没有在props声明的属性。$attrs就是剔除被props定义的属性。</p><h3 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h3><p>包含父作用域中(不含.navtive修饰符)v-on事件监听器，</p><p>父组件方法可以通过v-on=”$listeners”传入内部组件。在创建更高层次的组件时非常有用。</p><p>场景：子组件需要调用父组件的方法</p><p>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Parent @change=&quot;change&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted: &#123;</span><br><span class="line">     console.log(this.$listeners) // 拿到 change事件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h3><p>这对选项需要一起使用，主要为高阶插件和组件库提供。不推荐直接应用在程序中。以允许一个祖先组件向其所有子孙后代注入一个依赖，不论层次有多深，并在起上下有关系成立的时间里始终生效。</p><p>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  provide: &#123; // provide是一个对象 </span><br><span class="line">    bar: &apos;这是父&apos;,</span><br><span class="line">    fn: () =&gt; &#123;</span><br><span class="line">      console.log(&apos;函数被调用&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>子或者孙子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: [&apos;bar&apos;, &apos;fn&apos;] // 对象 数组注入到子或孙子组件</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.bar);</span><br><span class="line">    this.fn();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>pronide与inject绑定并不是可响应的。这是官方刻意为之的。如果传入一个可监听对象，那么其对象的属性还是可响应的。</p><p>父组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    bar: &apos;这是父&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.bar = &apos;这是子&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>子或孙子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: [&apos;bar&apos;],</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.bar); // 这是父</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="parent"><a href="#parent" class="headerlink" title="$parent"></a>$parent</h3><p>父组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$children)</span><br><span class="line">    // 能拿到一级子组件的属性和方法</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h3><p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">   mounted() &#123;</span><br><span class="line">     console.log(this.parent)</span><br><span class="line">     // 可以拿到一级父组件的属性和方法</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>$parent和$children并不保证顺序，又不是响应式的</strong>。</p><h3 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h3><p><strong>ref用在普通DOM元素上，指向就是DOM元素；用在子组件，指向组件实例</strong></p><p>父组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child ref=&quot;child&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &apos;@/components/Child&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const child = this.$refs.child;</span><br><span class="line">    console.log(child.name)  // vue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> data() &#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     name: &apos;vue&apos;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$root) // 根实例</span><br><span class="line">    console.log(this.$root.$children[0]) // 根实例的一级子组件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>.sync </li></ul><p>父组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Parent :msg.sync=&quot;title&quot; /&gt;</span><br><span class="line">// 编译时扩展如下：</span><br><span class="line">&lt;Parent :msg=&quot;msg&quot; @update.msg=&quot;val =&gt; msg = val&quot;&gt;</span><br></pre></td></tr></table></figure><p>子组件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$emit(&apos;update:msg&apos;, &apos;新的msg&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>自定义事件添加原生click事件，使用native修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;component @click.native=&quot;xxx&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>.lazy<br>默认情况下，v-model在每一次input事件触发后将输入的值与数据同步。可以使用lazy修饰符，转变使用change事件同步，输入完内容后，光标离开才更新视图。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.lazy=&quot;xxx&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>.number<br>输入的值转化为数值类型。如果先输入的是数字，会限制输入的只能是数字，视图上只显示数字；如果先输入的是字母，相当于没有添加number修饰符，输入什么视图显示什么。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.number=&quot;xxx&quot; /&gt; </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>.trim<br>过滤input输入内容前后空格，中间空格不过滤。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.trim=&quot;xxx&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>.stop<br>一键阻止事件冒泡，相当于event.stopPropagetion()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click.stop=&quot;func&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>.prevent<br>阻止事件的默认行为，相当于event.preventDefault()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">  &lt;form v-on:submit.prevent=&quot;func&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>@click.prevent.self会阻止所有点击；@click.self.prevent只会阻止元素自身的点击。</p><ul><li>.self<br>当事件是从事件绑定的元素本身触发回调。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click.self=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div @click.self=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>.once<br>只能用一次，数据发生变化也不会改变；绑定事件以后只能触发一次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click.once=&quot;func&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>.capture<br>完整的事件机制：捕获阶段-&gt;目标阶段-&gt;冒泡节点。添加capture就反过来，事件触发从包含这个元素顶层开始往下传播。</p></li><li><p>config.keyCodes自定义按键修饰符别名</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.config.keyCodes.f1 = func;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h3><p>简称插槽，作用是将父组件的template传入子组件。插槽有匿名插槽和作用域插槽。</p><p>匿名插槽<br>父组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Parent&gt;</span><br><span class="line">  &lt;template v-slot:default&gt;</span><br><span class="line">    任意内容</span><br><span class="line">    &lt;p&gt;这里是匿名插槽&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/Parent&gt;</span><br></pre></td></tr></table></figure></p><p>子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot&gt;插槽默认值&lt;/slot&gt;</span><br></pre></td></tr></table></figure></p><p>具名插槽，相对匿名插槽组件slot带有name名称<br>父组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Parent&gt;</span><br><span class="line">  &lt;template v-slot:child&gt;</span><br><span class="line">    任意内容</span><br><span class="line">    &lt;p&gt;这里是具名插槽&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/Parent&gt;</span><br></pre></td></tr></table></figure></p><p>子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=&quot;child&quot;&gt;这是子插槽&lt;/slot&gt;</span><br></pre></td></tr></table></figure></p><ul><li>作用域插槽<br>子组件中的数据可以被父组件拿到</li></ul><p>父组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Parent&gt;</span><br><span class="line"> &lt;template v-slot:child=&quot;slotData&quot;&gt;</span><br><span class="line">     &#123;&#123; slotData.msg &#125;&#125;</span><br><span class="line"> &lt;/template&gt;</span><br><span class="line">&lt;/Parent&gt;</span><br></pre></td></tr></table></figure><p>slotData可以是任意名称，接收是子组件标签slot上属性数据</p><p>子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=&quot;child&quot; :msg=&quot;msg&quot;&gt;</span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;slot&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">     return &#123;</span><br><span class="line">     msg: &apos;插槽&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure></p><p>msg是默认数据，在父组件没有v-slot:child=”slotData”时填充。</p><h3 id="filters过滤器"><a href="#filters过滤器" class="headerlink" title="filters过滤器"></a>filters过滤器</h3><p>可用于常见的文本数据进行格式化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg| upperCase(true) &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">filters: &#123;</span><br><span class="line">      upperCase: function(val, bol) &#123;</span><br><span class="line">       const str = val.toString();</span><br><span class="line">       if(!!bol) &#123;</span><br><span class="line">          return val.charAt(0).toUpperCase() + val.slice(1)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        return str.toUpperCase()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="v-if与v-show"><a href="#v-if与v-show" class="headerlink" title="v-if与v-show"></a>v-if与v-show</h3><p>v-if 根据条件为false时，不存在DOM；在切换过程中，需要经过销毁和重建，开销高。<br>v-show 一直存在DOM中，使用CSS的display属性控制，开销小。</p><h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><p>额外添加数据有可能不是响应式数据，使用set加入Vue响应式中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(目标对象, 目标对象属性, 目标对象属性值)</span><br></pre></td></tr></table></figure></p><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>用来对组件进行缓存，节省性能。由于是一个抽象组件，在页面渲染完毕后不会被渲染成一个DOM元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;Child&gt;&lt;/Child&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></p><p>在组件切换时，activated/deactivated钩子函数会被执行，被包裹在kepp-alive中的组件状态，会被保留。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue3.x版本已经在路上，在到来之前总结Vue2.x版本开发经验，趁机打好Vue2.x版本基础，本文列举以下开发技巧：&lt;/p&gt;
&lt;h3 id=&quot;导入组件&quot;&gt;&lt;a href=&quot;#导入组件&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.yuanbeauty.com/categories/Vue/"/>
    
      <category term="Vue实用技巧" scheme="http://blog.yuanbeauty.com/categories/Vue/Vue%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>JSON.stringify() 妙用</title>
    <link href="http://blog.yuanbeauty.com/archives/85d76abc.html"/>
    <id>http://blog.yuanbeauty.com/archives/85d76abc.html</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-07-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="调试对象"><a href="#调试对象" class="headerlink" title="调试对象"></a>调试对象</h4><p>比如，如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var user = &#123;</span><br><span class="line">name: &apos;hello word&apos;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(user)</span><br></pre></td></tr></table></figure><p>打印输出 <code>[object Object]</code>，因为从对象到字符串的默认转换是 <code>[object Object]</code>。因此，使用 <code>JSON.stringify</code> 先将对象转化字符串，然后把结果输出控制台。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var user = &#123;</span><br><span class="line">name: &apos;hello word&apos;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(user))</span><br><span class="line"></span><br><span class="line">// &#123;name:&quot;hello word&quot;, age:18&#125;</span><br></pre></td></tr></table></figure><h4 id="存储-localStorage-对象"><a href="#存储-localStorage-对象" class="headerlink" title="存储 localStorage 对象"></a>存储 localStorage 对象</h4><p>有时想存储创建的对象，并且在浏览器被关闭后让能恢复该对象。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var course = &#123;</span><br><span class="line">name: &apos;三年级语文&apos;,</span><br><span class="line">price: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">localStorage.setItem(&apos;course&apos;, JSON.stringify(course));</span><br><span class="line"></span><br><span class="line">var getLocalCourse = JSON.parse(localStorage.getItem(&apos;course&apos;));</span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">arr.forEach(function(item) &#123;</span><br><span class="line">var newData = &#123;&#125;;</span><br><span class="line">Object.keys(item).sort().map(function(key) &#123;</span><br><span class="line">newData[key] = item[key];</span><br><span class="line">&#125;)</span><br><span class="line">obj[JSON.stringify(newData)] = item; // 键名不会重复</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">arr = Object.keys(obj).map(function(val) &#123;</span><br><span class="line">return JSON.parse(val);</span><br><span class="line">&#125;)</span><br><span class="line">return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSON.stringify</code> 第二个参数可以决定筛选出来的内容，还有第三个参数，可以参考 <code>MDN</code>。</p><h4 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function deepClone(data) &#123;</span><br><span class="line">var _data = JSON.stringify(data);</span><br><span class="line">var newData = JSON.parse(_data);</span><br><span class="line">return newData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断数组是否包含对象，或者对象是否相等"><a href="#判断数组是否包含对象，或者对象是否相等" class="headerlink" title="判断数组是否包含对象，或者对象是否相等"></a>判断数组是否包含对象，或者对象是否相等</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 判断数组是否包含某对象 */ </span><br><span class="line"></span><br><span class="line">var data1 = [</span><br><span class="line">&#123; name: &apos;cherry&apos; &#125;,</span><br><span class="line">&#123; name: &apos;sunny&apos; &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">var data2 = &#123; name: &apos;sunny&apos; &#125;;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(data1).indexOf(JSON.stringify(data2)) != -1)</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">/* 判断数组或对象是否相等 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var a = [1, 2, 3];</span><br><span class="line">var b = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(a) == JSON.stringify(b)) </span><br><span class="line">// true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;调试对象&quot;&gt;&lt;a href=&quot;#调试对象&quot; class=&quot;headerlink&quot; title=&quot;调试对象&quot;&gt;&lt;/a&gt;调试对象&lt;/h4&gt;&lt;p&gt;比如，如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yuanbeauty.com/categories/JavaScript/"/>
    
      <category term="JSON.stringify() 妙用" scheme="http://blog.yuanbeauty.com/categories/JavaScript/JSON-stringify-%E5%A6%99%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>你不知道的前端安全知识</title>
    <link href="http://blog.yuanbeauty.com/archives/8e8805c.html"/>
    <id>http://blog.yuanbeauty.com/archives/8e8805c.html</id>
    <published>2019-05-02T16:00:00.000Z</published>
    <updated>2019-05-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近线上项目被他人攻击，对网站危害极大。之前对前端安全知识只是大致了解，简单应用。为了更详细的了解与应用前端安全知识，因此查找与前端安全相关材料抱着求学的心态系统地学习前端安全知识，在这里做个简单的总结，希望在日常开发中不断预防和修复漏洞。</p><p>典型的前端安全有XSS攻击和CSRF攻击，本篇主要从这两方面阐述。</p><p><strong>XSS的介绍</strong></p><p>XSS全称Cross-Site Scripting(跨站脚本攻击)，是一种代码注入攻击。攻击者在目标网站上注入恶意脚本，能在用户的浏览器上运行。利用恶意脚本，攻击者可以获取用户敏感信息，如：Cookie等，进行攻击危害数据。</p><h3 id="XSS存在的原因"><a href="#XSS存在的原因" class="headerlink" title="XSS存在的原因"></a>XSS存在的原因</h3><p>在URL参数场景，用户输入提交给服务端的URL内容，没有进行充分的过滤。如果将所有不合法的参数和输入内容做充分的过滤，就不会导致在用户浏览器中执行攻击者的脚本。</p><p>只做URL参数过滤和用户提交内容过滤是不行的。因为攻击者可以使用各种方式绕过服务端的过滤，最典型的是对URL参数进行各种编码，比如: <code>escape/encodeURI/encodeURIComponent</code>/8进制/10进制/16进制绕过过滤。   </p><p><strong>XSS攻击方式</strong></p><p>①、一个搜索页面，点击搜索页面url添加上了关键词，页面显示与关键词相关的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&quot;&lt;%= getParams(keyword)%&gt;&quot; /&gt;</span><br><span class="line">&lt;button&gt;搜索&lt;/button&gt;</span><br><span class="line">&lt;div&gt;显示搜索的内容：&lt;%= getParams(keyword)%&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>附：文中&lt;%= … %&gt;语法参考EJS语法。</li></ul><p>文本框值没做任何处理，项目就上线了。某天收到一个神秘链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/search?keyword=&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>浏览器发送请求<code>http://www.xxx.com/search?keyword=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>时，后端会解析URL中的请求参数keyword的值，得到<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>，浏览器最终在页面搜索结果区域显示与关键词相关内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;显示搜索的内容：&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>对于<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>浏览器无法分辨是否属于恶意代码，因此会执行脚本。</p><p>对于这种攻击方式，可以告诉浏览器这段内容是文本就可以了。可以选择进行转义字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&quot;&lt;%= esHTML(getParams(keyword))%&gt;&quot; /&gt;</span><br><span class="line">&lt;button&gt;搜索&lt;/button&gt;</span><br><span class="line">&lt;div&gt;显示搜索的内容：&lt;%= esHTML(getParams(keyword))%&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>转义规则：</p><table><thead><tr><th>字符</th><th>转义后的字符</th></tr></thead><tbody><tr><td>‘</td><td><code>&amp;#x27;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>/</td><td><code>&amp;#x2F;</code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr></tbody></table><p>经过转义后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&quot;&amp;lt;script&amp;gt;alert(&amp;#x27;xss&amp;#x27;)&amp;lt;script&amp;gt;&quot; /&gt;</span><br><span class="line">&lt;button&gt;搜索&lt;/button&gt;</span><br><span class="line">&lt;div&gt;显示搜索的内容：</span><br><span class="line">  &amp;lt;script&amp;gt;alert(&amp;#x27;xss&amp;#x27;)&amp;lt;script&amp;gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>通过<strong>转义字符恶意脚本</strong>被转义，浏览器<strong>不会执行</strong>恶意脚本，搜索到的与关键词相关内容也正常在页面中显示出来。有些情况只做HTML转义，并不是高枕无忧，比如下面场景。</p><p>②、超链接场景，页面正常显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.xxx.com/search?to=javascript:alert(&apos;xss&apos;);&quot;&gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>用户一旦进行点击，浏览器就会执行代码；这种场景如果使用上述转义字符规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.xxx.com/search?to=javascript:alert(&amp;#x27;xss&amp;#x27;);&quot;&gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>显然是不可行的。因为href跟的是正确属性，浏览器无法分辨属性值是否属于恶意代码，用户点击恶意脚本会执行。</p><p>对于这种形式可以<strong>设置白名单</strong>预防攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var allowHTTP = [&apos;http&apos;, &apos;https&apos;];</span><br><span class="line">var isAllow = isAllowFunc(allowHTTP, to);</span><br><span class="line">if(!!isAllow) &#123;</span><br><span class="line">  &lt;a href=&quot;跳转到相应页面&quot;&gt;...&lt;/a&gt;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  &lt;a href=&quot;/404.html&quot;&gt;...&lt;/a&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过该方式可知针对超链接跳转方式，如：<code>location.href=&quot;xxx&quot;或者&lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt;；</code>甚至包括<code>&lt;script&gt;，&lt;style&gt;，&lt;img&gt;</code>等标签的src属性值，可以选择白名单校验禁止以<code>javascript:</code>开头的链接 (包括javascript大小写的拼写) 和其他非法的scheme。</p><p>③、有些情况把JSON数据直接写在HTML中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; var data = data.toJSON(); &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这种方式JSON也存在风险，并且插入的JSON不能进行转义。因为转义 “ 后JSON格式被破坏。</p><p>因此需要实现一个对JSON数据进行转义的方法。但是需要注意的是：</p><ul><li><p>当JSON中包含U+2028或U+2029这两个字符时，不能作为 JavaScript 的字面量使用，否则会抛出语法错误。</p></li><li><p>当JSON中包含字符串<code>&lt;/script&gt;</code>时，当前的script标签将会被闭合，后面的字符串内容浏览器会按照HTML进行解析；通过增加下一个<code>&lt;script&gt;</code>标签等方法就可以完成注入。</p></li></ul><p>转义规则：</p><table><thead><tr><th>字符</th><th>转义后的字符</th></tr></thead><tbody><tr><td>U+2028</td><td><code>\u2028</code></td></tr><tr><td>U+2029</td><td><code>\u2029</code></td></tr><tr><td>&lt;</td><td><code>\u003c</code></td></tr></tbody></table><p>修改后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; var data = esJSON(data.toJSON()); &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过以上可知：</p><p>HTML<strong>转义</strong>是<strong>非常复杂</strong>的，在不同的场景要<strong>采用不同的转义规则</strong>。如果采用的方式不正确，很可能埋下XSS隐患。因此尽量避免自己写转义库，<strong>应采用成熟，通用的转义库</strong>。</p><h3 id="归纳注入方式"><a href="#归纳注入方式" class="headerlink" title="归纳注入方式"></a>归纳注入方式</h3><ul><li>在HTML中内嵌恶意内容以script标签形式注入。</li><li>在HTML中拼接的JavaScript数据突破了原本的限制(字符串，变量等)。</li><li>在标签属性中，恶意内容包含引号，突破属性值的限制，注入其他属性或标签。</li><li>在标签style，href，src等属性中，包含JavaScript等可执行代码。</li><li>在onload，onclick等事件中注入不受控制的代码。</li><li>在style属性和标签中，包含background: url(‘JavaScript…’)类似代码。</li><li>在style属性和标签中，包含expression(…)类似CSS表达式代码。</li></ul><h3 id="XSS攻击分类"><a href="#XSS攻击分类" class="headerlink" title="XSS攻击分类"></a>XSS攻击分类</h3><p>根据攻击的来源，可以将XSS攻击分以下类型：</p><ul><li>存储型攻击</li></ul><p>该攻击常见于论坛博主发贴，网站用户评论，网站用户留言等场景，攻击者将<strong>恶意脚本存储到目标网站</strong>上。</p><p>实现方式：<br>1、攻击者将恶意脚本提交到目标网站数据库中。<br>2、用户打开该网站浏览时，浏览器发送请求恶意脚本从数据库中读取，拼接在页面HTML中。<br>3、浏览器接收到响应后解析执行。<br>4、混在其中的恶意脚本也被执行，恶意脚本窃取用户数据，如：Cookie，发送到攻击者网站。</p><ul><li>反射型攻击</li></ul><p>该攻击常见于网站搜索，跳转等场景，通过URL传递参数，需要用户主动打开恶意的URL才会生效。攻击者将<strong>恶意脚本存储到URL</strong>里。</p><p>实现方式：<br>1、攻击者构造出特殊的URL并添加恶意脚本。<br>2、用户打开带有恶意脚本的URL，服务端将恶意脚本从URL中取出，拼接在HTML中返回给浏览器。<br>3、浏览器接收到响应后解析执行。<br>4、混在其中的恶意脚本也被执行，恶意脚本窃取用户数据，如：Cookie，发送到攻击者网站。</p><ul><li>DOM型攻击</li></ul><p>该攻击常发生于用户的输入来动态的构造一个DOM节点场景，如果没有对用户的输入进行过滤，很有可能造成XSS攻击。<strong>基于DOM的XSS</strong>取出恶意脚本和执行恶意脚本<strong>由浏览器端完成</strong>，服务端不参与。</p><p>实现方式：<br>1、攻击者构造出特殊的URL并添加恶意脚本。<br>2、用户打开带有恶意脚本的URL。<br>3、浏览器接收到响应后解析执行，前端JavaScript取出URL中的恶意脚本并执行。<br>4、恶意脚本窃取用户数据，如：Cookie，发送到攻击者网站。</p><h3 id="XSS防御策略"><a href="#XSS防御策略" class="headerlink" title="XSS防御策略"></a>XSS防御策略</h3><ul><li>客户端对用户有明确的输入类型，例如：数字，URL，手机号，邮箱等内容进行安全符转义，服务端对提交的内容进行安全转义。</li><li>对输入和URL参数进行过滤，对输出进行编码；和白名单结合。</li><li>避免拼接HTML。如果框架允许，使用createElement，setAttribute等之类的方法实现，或者采用比较成熟的框架，如：Vue/React。</li><li>要警惕插入位置为DOM属性，链接等位置。</li><li>尽量不要使用onClick=”fn(‘‘)”等形式内联事件的写法。可以通过addEventListener事件绑定更安全。</li><li>服务端渲染开启模版引擎自带的HTML转义功能。</li><li>增加验证码功能，防止脚本冒充用户提交危险操作。</li><li>限制用户输入长度，增加攻击的难度。</li><li>设置Http-Only Cookie 禁止JavaScript读取敏感Cookie，攻击者完成XSS注入也无法窃取Cookie。</li><li>避免第三方跨域提交内容到服务端。</li></ul><h3 id="CSRF的介绍"><a href="#CSRF的介绍" class="headerlink" title="CSRF的介绍"></a>CSRF的介绍</h3><p>CSRF全称Cross-Site Request Forgery(跨站请求伪造)，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><h3 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a>CSRF的特点</h3><ul><li>攻击一般在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li><li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作，而不是直接窃取数据。</li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是冒用。</li><li>跨站请求可以用各种方式，如：图片URL，超链接，Form等。部分请求方式可以直接嵌入在第三方论坛中，难以追踪。</li></ul><p><strong>CSRF通常是跨域的</strong>，因为<strong>外域</strong>通常更容易被攻击者<strong>掌握</strong>。反之，在本域下进行，如：可以发链接的评论，攻击反而更加危险。</p><h3 id="CSRF攻击分类"><a href="#CSRF攻击分类" class="headerlink" title="CSRF攻击分类"></a>CSRF攻击分类</h3><ul><li>GET类型的CSRF</li></ul><p>该攻击方式只需要一个HTTP请求，一般是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.xxx.com?time=100&amp;keyword=get&quot; alt=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure><p>受害者在访问这个图片页面后，浏览器自动向：<code>http://www.xxx.com?account=danger&amp;time=100&amp;keyword=get</code>发送一次HTTP请求。<code>www.xxx.com</code>会包含受害者登录信息的一次跨域请求。</p><ul><li>POST类型的CSRF。</li></ul><p>该攻击方式通常使用的是一个自动提交的表单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.xxx.com&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;hidden&quot; name=&quot;time&quot; value=&quot;100&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt; document.forms[0].submit(); &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用户访问该页面，表单会自动提交，完成了模拟POST操作。一般在网站上传功能上很有可能是发起攻击的来源。</p><ul><li>链接类型的CSRF。</li></ul><p>该攻击方式通常发生在论坛发布图片嵌入恶意链接，或者以广告的形式诱导用户点击，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.xxx.com/csrf&quot;&gt;充1元送1000&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这种方式是用户之前登录了信任网站A，并且保存了登录状态。只要用户主动访问这个页面，攻击者就能攻击成功。</p><h3 id="CSRF防御策略"><a href="#CSRF防御策略" class="headerlink" title="CSRF防御策略"></a>CSRF防御策略</h3><ul><li>添加token验证</li></ul><p>本站点的接口请求前在头部添加token用于鉴别身份，第三方站点不能获取头部token。</p><p>该方式弊端：token鉴权对服务器压力较大；页面form提交，超链接不能形成统一的token增加入口，造成部分疏漏。</p><ul><li>服务端通过Referer Header和Origin Header进行同源验证。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.xxx.com/csrf&quot; referrerpolicy=&quot;no-referrer&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>该方式弊端：<br>1、可以部分修改或隐藏Referer。<br>2、在低版本浏览器下对Referer和Origin不是很稳定。<br>3、在一些浏览器或操作会丢失Origin头部，如：302重定向。<br>4、HTTPS跳转到HTTP，所有浏览器Referer都会丢失。</p><ul><li>禁止第三方网站获取Cookie。</li></ul><p>可以设置Chrome的SameSite属性，而SameSite兼容性不好。</p><ul><li>利用双重Cookie认证。</li></ul><p>每个请求的参数都添加scrfCookie=’随机数’ 防御参数，并在Cookie中混入该防御参数值，服务端请求头部的Cookie中的Cookie参数和请求参数所带的该参数进行对比。</p><p>该方式弊端：<br>如果前后端代码分离，前端和后端接口不同源，如：前端为<code>www.a.com</code>，后端为<code>api.a.com</code>，前端要拿到后端接口下的Cookie，必须将Cookie放在<code>a.com</code>下才能保证子域下都可以获取到，然而这样会增加XSS攻击风险。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇到这里算是结束了，从以上内容可以知晓：防范XSS是需要前端和后端共同参与的，针对DOM型攻击需要前端完成，选择适合的转义库，在不同的上下文调用不同的转义规则；防范CSRF，自动防御策略需要使用同源检测(Referer和Origin验证)，主动防御策略增加Token验证或双重Cookie验证，以及配合Samesite Cookie。为了更好的防御，最佳实践应结合防御措施优缺点和Web应用程序自身情况选择适合方案。文章可能存在一些没有说清楚的地方或者有错的地方，欢迎指正~</p><p>参考资料：</p><ul><li>XSS防御方法总结</li><li><a href="https://www.cnblogs.com/meituantech/p/9718677.html" target="_blank" rel="noopener">前端安全系列（一）：如何防止XSS攻击？</a></li><li><a href="https://blog.csdn.net/MeituanTech/article/details/83023558" target="_blank" rel="noopener">前端安全系列之二：如何防止CSRF攻击？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近线上项目被他人攻击，对网站危害极大。之前对前端安全知识只是大致了解，简单应用。为了更详细的了解与应用前端安全知识，因此查找与前端安全相关
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yuanbeauty.com/categories/JavaScript/"/>
    
      <category term="JavaScript安全" scheme="http://blog.yuanbeauty.com/categories/JavaScript/JavaScript%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>学习Flex知识</title>
    <link href="http://blog.yuanbeauty.com/archives/48632995.html"/>
    <id>http://blog.yuanbeauty.com/archives/48632995.html</id>
    <published>2019-02-25T16:00:00.000Z</published>
    <updated>2019-02-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前都是使用传统的CSS布局方式，但随着CSS3广泛应用在移动端和主流浏览器中，抱着求学的心态学习接收前端新的知识Flex布局，在这里做下笔记进行总结。</p><hr><h3 id="Flex使用"><a href="#Flex使用" class="headerlink" title="Flex使用"></a>Flex使用</h3><p>设置Flex布局，在父框添加 display:flex即可。</p><p>Flex布局有浏览器兼容性，需要根据不同浏览器内核添加不同浏览器前缀，比如Chrome浏览器使用 -webkit- 前缀。</p><p><strong>注意：</strong> 如果用了弹性布局，子元素不需要浮动 float。</p><h3 id="父框设置Flex携带属性"><a href="#父框设置Flex携带属性" class="headerlink" title="父框设置Flex携带属性"></a>父框设置Flex携带属性</h3><p>justify-content: 子元素水平排列方式，值有以下几种：</p><ul><li>center 居中，(常用)</li><li>space-between    两端对齐(常用)</li><li>space-around    子元素拉手分布    (常用)</li><li>flex-start 居左</li><li>flex-end 居右</li></ul><p>align-items: 子元素垂直排列，值有以下几种：</p><ul><li>center 居中(常用)</li><li>flex-end 底部</li><li>flex-start 开始</li></ul><p>align-content:多行的时候，垂直排列</p><ul><li>center 居中<br>…</li></ul><p>flex-direction: 排列方式，该属性值有以下几种：</p><ul><li>row 横向排列</li><li>row-reverse 横向翻过排列</li><li>column 纵向排列</li><li>column-reverse 纵向翻过排列</li></ul><p>flex-wrap: 子元素是否在一行显示，该属性值有以下几种：</p><ul><li>nowrap 不换行</li><li>wrap 换行</li></ul><p>flex-flow 全拼是 <code>&lt;flex-direction&gt;</code> 与 <code>&lt;flex-wrap&gt;</code>的缩写。    </p><h3 id="子框身上属性"><a href="#子框身上属性" class="headerlink" title="子框身上属性:"></a>子框身上属性:</h3><p>父框设置Flex布局，子框携带的属性：</p><ul><li>flex:1，1 指的是一个系数。</li><li>子元素在划分父元素宽度，先刨除固定宽度。</li><li>align-self 其实就是用来覆盖父级 align-items  垂直排列。</li><li>flex-grow: 1;    定义子元素放大比例。</li><li>order: 规定子元素顺序。排序：数值越小，越靠前，默认值0。</li></ul><h3 id="flex：1的含义"><a href="#flex：1的含义" class="headerlink" title="flex：1的含义"></a>flex：1的含义</h3><ul><li>flex是flex-grow，flex-shrink，flex-basis的缩写。</li><li>flex-grow：父控件空间有剩余是否放大；0表示不放大。</li><li>flex-shrink：父控件空间不足是否缩小。</li><li>flex-basis：子控件占主轴的大小，主轴就是flex的主方向，row是横向，column是竖向。</li><li>flex默认属性是0 1 auto，(父控件有剩余控件不放大，父控件空间不足按1缩小，保持本身的空间大小)。</li><li>flex:1;的值是1 1 0%，(父控件有剩余空间按1放大，父控件空间不足按1缩小，自身的空间大小是0%)。</li></ul><p>参考资料：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前都是使用传统的CSS布局方式，但随着CSS3广泛应用在移动端和主流浏览器中，抱着求学的心态学习接收前端新的知识Flex布局，在这里做下笔
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.yuanbeauty.com/categories/CSS/"/>
    
      <category term="Flex布局" scheme="http://blog.yuanbeauty.com/categories/CSS/Flex%E5%B8%83%E5%B1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>格式化时间与ElementTree注意点</title>
    <link href="http://blog.yuanbeauty.com/archives/8bd98ba7.html"/>
    <id>http://blog.yuanbeauty.com/archives/8bd98ba7.html</id>
    <published>2018-07-27T16:00:00.000Z</published>
    <updated>2018-07-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>开发Vue项目遇到的问题与技巧。</p><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><p>之前处理日期会判断是否大于10，否则在前面加上<code>0</code>进行拼接，有了ES6对字符串进行扩展，提供了便捷；只需要转化成字符串，就能快捷格式化时间；不能写很多判断。</p><p>思路：</p><ul><li><p>把当前时间转化成字符串</p></li><li><p>使用字符串padStart方法，自动添加<code>0</code>进行补齐。</p></li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">initDate(day) &#123;</span><br><span class="line">let timeDate,Y,M,D,h,m,s;</span><br><span class="line">timeDate = new Date();</span><br><span class="line">timeDate.setDate(timeDate.getDate() + day);</span><br><span class="line">Y = timeDate.getFullYear();</span><br><span class="line">M = (timeDate.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line">D = timeDate.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">h = timeDate.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">m = timeDate.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">s = timeDate.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line">return `$&#123;Y&#125;-$&#123;M&#125;-$&#123;D&#125; $&#123;h&#125;:$&#123;m&#125;:$&#123;s&#125;`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ElementTree"><a href="#ElementTree" class="headerlink" title="ElementTree"></a>ElementTree</h3><p>如下图：</p><p><img src="/images/1_2.jpg" alt="ElementTree"></p><p>问题：</p><p>前端根据后端API开发数据交互，点击树形节点，会展示当前树形下的子节点。由于树形支持自定义icon，就使用<code>icon-class</code>自定义icon，但是点击同一级icon永远显示第一个子节点数据。</p><p>解决办法：</p><p>使用 <code>pointer-events:none</code> 结合 <code>cursor: default</code>。</p><p>pointer-events:none 表示不能使用鼠标事件点击。</p><p>cursor: default 表示鼠标没有小手状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发Vue项目遇到的问题与技巧。&lt;/p&gt;
&lt;h3 id=&quot;格式化时间&quot;&gt;&lt;a href=&quot;#格式化时间&quot; class=&quot;headerlink&quot; title=&quot;格式化时间&quot;&gt;&lt;/a&gt;格式化时间&lt;/h3&gt;&lt;p&gt;之前处理日期会
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.yuanbeauty.com/categories/Vue/"/>
    
      <category term="ElementTree" scheme="http://blog.yuanbeauty.com/categories/Vue/ElementTree/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS3 应用属性</title>
    <link href="http://blog.yuanbeauty.com/archives/a05945db.html"/>
    <id>http://blog.yuanbeauty.com/archives/a05945db.html</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><p>在 <code>css3</code> 之前绘制圆形通常使用 <code>UI</code> 给出的设计图作为背景或者 <code>icon</code> 使用。</p><p>比如画一个圆形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .box&#123; </span><br><span class="line">        width:60px;</span><br><span class="line">        height:60px;</span><br><span class="line">        background:url(&apos;./xxx.png&apos;) no-repeat center center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>css3</code> 问世后，可以使用 <code>border-radius</code> 绘制圆形。</p><p>比如绘制一个圆形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .box&#123; </span><br><span class="line">        width:200px;</span><br><span class="line">        height:200px;</span><br><span class="line">        border-top-left-radius: 50%;</span><br><span class="line">        border-top-right-radius: 50%;</span><br><span class="line">        border-bottom-left-radius: 50%;</span><br><span class="line">        border-bottom-right-radius: 50%;</span><br><span class="line">        background-color:#f00;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>样式可以简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box&#123; </span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background-color:#f00;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制半圆形"><a href="#绘制半圆形" class="headerlink" title="绘制半圆形"></a>绘制半圆形</h3><p>绘制半圆形考虑将长度或宽度减少一半（如：<code>width: 200</code> 那么 <code>height: 100</code>）。</p><p>比如绘制一个半圆形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .box&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border-radius: 100px 0 0 100px;</span><br><span class="line">        background-color:#f00;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><code>:first-letter</code>：可以控制文本首个汉字或字母样式。</p><p><code>:first-line</code>：可以控制文本首行样式。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;You can use the x pseudo-element to add a special effect to the first letter of a text!&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">p&#123; </span><br><span class="line">    width:30px;</span><br><span class="line">    height:30px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border:1px solid #000;</span><br><span class="line">&#125;</span><br><span class="line">p::first-letter&#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">p::first-line&#123;</span><br><span class="line">    color: #f00;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>before</code> 与 <code>:after</code> 在元素前与元素后插入新内容。注意的是必须使用 <code>content</code> 属性。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;讲台词&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .box::before&#123; </span><br><span class="line">        content: &apos;小明&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    .box::after&#123; </span><br><span class="line">        content: &apos;很棒！&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3绘制一个正方形均分的三角形"><a href="#CSS3绘制一个正方形均分的三角形" class="headerlink" title="CSS3绘制一个正方形均分的三角形"></a>CSS3绘制一个正方形均分的三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123; </span><br><span class="line">    border-top:50px solid #999;</span><br><span class="line">    border-left: 50px solid #f00;</span><br><span class="line">    border-bottom: 50px solid #0f0;</span><br><span class="line">    border-right: 50px solid #00f;</span><br><span class="line">    width:0;</span><br><span class="line">    height:0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3绘制三角形"><a href="#CSS3绘制三角形" class="headerlink" title="CSS3绘制三角形"></a>CSS3绘制三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123; </span><br><span class="line">    border-top:50px solid transparent;</span><br><span class="line">    border-left: 50px solid #f00;</span><br><span class="line">    border-bottom: 50px solid transparent;</span><br><span class="line">    border-right: 0 solid #00f;</span><br><span class="line">    width:0;</span><br><span class="line">    height:0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><em>绘制单独三角形，将该三角形的反向 <code>border</code> 属性设置为 0，其他方向 <code>border</code> 属性设置为透明 <code>transparent</code></em>。</p><h3 id="CSS3绘制对话框"><a href="#CSS3绘制对话框" class="headerlink" title="CSS3绘制对话框"></a>CSS3绘制对话框</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;Hello, everyone！&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.dialog&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:60px;</span><br><span class="line">    background-color:#6a6;</span><br><span class="line">    border-radius:10px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dialog::before&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    border-top:10px solid transparent;</span><br><span class="line">    border-bottom: 10px solid transparent;</span><br><span class="line">    border-left: 0 solid #6a6;</span><br><span class="line">    border-right: 10px solid #6a6;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 20px;</span><br><span class="line">    left: -10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3绘制菱形"><a href="#CSS3绘制菱形" class="headerlink" title="CSS3绘制菱形"></a>CSS3绘制菱形</h3><p>首先绘制正方形，然后使用 <code>transform</code> 旋转（<code>rotate</code>）属性，旋转一定角度，即变化成菱形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;diamond&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.diamond&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color:#6a6;</span><br><span class="line">    -webkit-transform: rotate(45deg);</span><br><span class="line">    -ms-transform: rotate(45deg);</span><br><span class="line">    -o-transform: rotate(45deg);</span><br><span class="line">    transform: rotate(45deg);   </span><br><span class="line">    </span><br><span class="line">    margin: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3绘制平行四边形"><a href="#CSS3绘制平行四边形" class="headerlink" title="CSS3绘制平行四边形"></a>CSS3绘制平行四边形</h3><p>首先绘制长方形，然后使用 <code>transform</code> 倾斜（<code>skew</code>） 属性，倾斜一定角度，即变化成平行四边形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;parallel&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.parallel&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:100px;</span><br><span class="line">    background-color:#6a6;</span><br><span class="line">    -webkit-transform: skew(45deg);</span><br><span class="line">    -ms-transform: skew(45deg);</span><br><span class="line">    -o-transform: skew(45deg);</span><br><span class="line">    transform: skew(45deg); </span><br><span class="line"></span><br><span class="line">    margin:200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>skew</code> 有两个参数： <code>skew(x轴, y轴)</code>。</p><h3 id="CSS3-绘制五角星"><a href="#CSS3-绘制五角星" class="headerlink" title="CSS3 绘制五角星"></a>CSS3 绘制五角星</h3><p>首先绘制一个钝角三角形，然后旋转正 35 度；使用伪元素绘制一个锐角和一个钝角三角形，分别旋转逆时针 35 度和逆时针 70度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;star&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.star&#123;</span><br><span class="line">    width:0;</span><br><span class="line">    height:0;</span><br><span class="line">    border-top:0px solid #f00;</span><br><span class="line">    border-bottom:70px solid #f00;</span><br><span class="line">    border-left:100px solid transparent;</span><br><span class="line">    border-right:100px solid transparent;</span><br><span class="line">    transform: rotate(35deg);</span><br><span class="line"></span><br><span class="line">    position: relative;</span><br><span class="line">    margin:  200px auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.star::before&#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    border-top:0px solid #f00;</span><br><span class="line">    border-bottom:80px solid #f00;</span><br><span class="line">    border-left:30px solid transparent;</span><br><span class="line">    border-right:30px solid transparent;</span><br><span class="line">    -webkit-transform: rotate(-35deg);</span><br><span class="line">    -ms-transform: rotate(-35deg);</span><br><span class="line">    -o-transform: rotate(-35deg);</span><br><span class="line">    transform: rotate(-35deg);</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: -45px;</span><br><span class="line">    left: -62px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.star::after&#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    border-top:0 solid #f00;</span><br><span class="line">    border-bottom: 70px solid #f00;</span><br><span class="line">    border-left:100px solid transparent;</span><br><span class="line">    border-right:100px solid transparent;</span><br><span class="line">    -webkit-transform: rotate(-70deg);</span><br><span class="line">    -ms-transform: rotate(-70deg);</span><br><span class="line">    -o-transform: rotate(-70deg);</span><br><span class="line">    transform: rotate(-70deg);</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 3px;</span><br><span class="line">    left: -105px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制六角形"><a href="#CSS3-绘制六角形" class="headerlink" title="CSS3 绘制六角形"></a>CSS3 绘制六角形</h3><p>六角形由两个三角形拼在一起绘制成功。</p><p>首先绘制一个锐角三角形，然后使用伪元素绘制一个锐角三角形，使用相对定位结合绝对定位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;star&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.star&#123;</span><br><span class="line">    width:0;</span><br><span class="line">    height:0;</span><br><span class="line">    border-top:0 solid #f00;</span><br><span class="line">    border-bottom:100px solid #f00;</span><br><span class="line">    border-left:50px solid transparent;</span><br><span class="line">    border-right:50px solid transparent;</span><br><span class="line"></span><br><span class="line">    margin:  100px auto;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.star::after&#123;</span><br><span class="line">    content:  &apos;&apos;;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top:100px solid #f00;</span><br><span class="line">    border-bottom:0 solid #f00;</span><br><span class="line">    border-left:50px solid transparent;</span><br><span class="line">    border-right:50px solid transparent;</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 30px;</span><br><span class="line">    left: -50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制梯形"><a href="#CSS3-绘制梯形" class="headerlink" title="CSS3 绘制梯形"></a>CSS3 绘制梯形</h3><p>首先绘制一个正方体的梯形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;zheng&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.zheng&#123;</span><br><span class="line">    width:50px;</span><br><span class="line">    height:50px;</span><br><span class="line">    border-top:50px solid #f00;</span><br><span class="line">    border-bottom:50px solid #0f0;</span><br><span class="line">    border-left:50px solid #00f;</span><br><span class="line">    border-right:50px solid #ff0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>由以上绘制梯形，并且左右 <code>border</code> 减小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;zheng&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.zheng&#123;</span><br><span class="line">    width:50px;</span><br><span class="line">    height:0;</span><br><span class="line">    border-top:50px solid #f00;</span><br><span class="line">    border-bottom:0 solid #0f0;</span><br><span class="line">    border-left:20px solid transparent;</span><br><span class="line">    border-right:20px solid transparent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制五边形"><a href="#CSS3-绘制五边形" class="headerlink" title="CSS3 绘制五边形"></a>CSS3 绘制五边形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;wu&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.wu&#123;</span><br><span class="line">    width:50px;</span><br><span class="line">    height:0;</span><br><span class="line">    border-top:50px solid #f00;</span><br><span class="line">    border-bottom:0 solid #0f0;</span><br><span class="line">    border-left:20px solid transparent;</span><br><span class="line">    border-right:20px solid transparent;</span><br><span class="line"></span><br><span class="line">    margin: 100px auto;</span><br><span class="line">    position: relative;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.wu::before&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    border-top:0 solid #f00;</span><br><span class="line">    border-bottom:45px solid #f00;</span><br><span class="line">    border-left:45px solid transparent;</span><br><span class="line">    border-right:45px solid transparent;</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: -95px;</span><br><span class="line">    left: -20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制六边形"><a href="#CSS3-绘制六边形" class="headerlink" title="CSS3 绘制六边形"></a>CSS3 绘制六边形</h3><p>六边形由一个长方形和两个三角形拼接结合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;six&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.six&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:100px;</span><br><span class="line">    background-color:#f00;</span><br><span class="line"></span><br><span class="line">    margin: 200px auto;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.six::before&#123;</span><br><span class="line">    content:  &apos;&apos;;</span><br><span class="line">    border-top: 0 solid #0f0;</span><br><span class="line">    border-bottom: 50px solid #0f0;</span><br><span class="line">    border-left: 100px solid transparent;</span><br><span class="line">    border-right: 100px solid transparent;</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: -50px;</span><br><span class="line">    left: 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.six::after&#123;</span><br><span class="line">    content:  &apos;&apos;;</span><br><span class="line">    border-top: 50px solid #0f0;</span><br><span class="line">    border-bottom: 0 solid #0f0;</span><br><span class="line">    border-left: 100px solid transparent;</span><br><span class="line">    border-right: 100px solid transparent;</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 100px;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制心"><a href="#CSS3-绘制心" class="headerlink" title="CSS3 绘制心"></a>CSS3 绘制心</h3><p>绘制两个长方形，每个长方形各一方使用 <code>border-radius</code> 绘制半圆，使用 <code>transform-origin</code> 旋转焦点属性，两个长方形旋转一定角度拼接结合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;heart&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.heart&#123;</span><br><span class="line">    width:50px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    background-color:#f00;</span><br><span class="line">    border-radius: 30px 30px 0 0;</span><br><span class="line">    transform-origin: 0 100%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line"></span><br><span class="line">    margin: 200px auto;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.heart::before&#123;</span><br><span class="line">    content:  &apos;&apos;;</span><br><span class="line">    width:50px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    background-color:#f00;</span><br><span class="line">    border-radius: 30px 30px 0 0;</span><br><span class="line">    transform-origin: 100% 0;</span><br><span class="line">    transform: rotate(90deg);</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 80px;</span><br><span class="line">    left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制蛋形"><a href="#CSS3-绘制蛋形" class="headerlink" title="CSS3 绘制蛋形"></a>CSS3 绘制蛋形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;egg&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.egg&#123;</span><br><span class="line">    width: 126px;</span><br><span class="line">    height:180px;</span><br><span class="line">    background-color:#f00;</span><br><span class="line">    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;</span><br><span class="line"></span><br><span class="line">    margin: 200px auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS3-绘制太极阴阳图"><a href="#CSS3-绘制太极阴阳图" class="headerlink" title="CSS3 绘制太极阴阳图"></a>CSS3 绘制太极阴阳图</h3><p>绘制一个圆形，使用伪元素设置两个小圆，结合相对定位和绝对定位拼接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;taiji&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">    background-color:#ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.taiji&#123;</span><br><span class="line">    width:150px;</span><br><span class="line">    height:300px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-left:  150px solid #000;</span><br><span class="line"></span><br><span class="line">    margin: 200px auto;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.taiji::before&#123;</span><br><span class="line">    content:  &apos;&apos;;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    padding: 25px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: 50px solid #000;</span><br><span class="line">    background-color: #fff;</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -75px;</span><br><span class="line">    top: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.taiji::after&#123;</span><br><span class="line">    content:  &apos;&apos;;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    padding: 25px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: 50px solid #fff;</span><br><span class="line">    background-color: #000;</span><br><span class="line"></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 150px;</span><br><span class="line">    left: -75px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;border-radius&quot;&gt;&lt;a href=&quot;#border-radius&quot; class=&quot;headerlink&quot; title=&quot;border-radius&quot;&gt;&lt;/a&gt;border-radius&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;css3&lt;/code&gt; 之前绘制圆形
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.yuanbeauty.com/categories/CSS/"/>
    
      <category term="CSS3 属性" scheme="http://blog.yuanbeauty.com/categories/CSS/CSS3-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
</feed>
